import React, { useEffect, useMemo, useRef, useState } from 'react';

// This file is a self-contained preview of the ECONEURA Cockpit UI.
// It's intentionally dependency-free (no external CSS frameworks) and uses inline styles
// and simple utility functions. Place under apps/web/src/components and import when needed.

const AI_ENDPOINT =
  (globalThis && (globalThis as any).ECONEURA_AI_ENDPOINT) ||
  (typeof localStorage !== 'undefined' && localStorage.getItem('ECONEURA_AI_ENDPOINT')) ||
  '/api/ai';
const AI_MODEL =
  (globalThis && (globalThis as any).ECONEURA_AI_MODEL) ||
  (typeof localStorage !== 'undefined' && localStorage.getItem('ECONEURA_AI_MODEL')) ||
  'gpt-4o-mini';
function setAIConfig({ endpoint, model }: { endpoint?: string; model?: string }) {
  try {
    if (endpoint) {
      (globalThis as any).ECONEURA_AI_ENDPOINT = endpoint;
      if (typeof localStorage !== 'undefined')
        localStorage.setItem('ECONEURA_AI_ENDPOINT', endpoint);
    }
    if (model) {
      (globalThis as any).ECONEURA_AI_MODEL = model;
      if (typeof localStorage !== 'undefined') localStorage.setItem('ECONEURA_AI_MODEL', model);
    }
  } catch (_) {
    /* no-op */
  }
}
async function pingAI(endpoint = AI_ENDPOINT) {
  try {
    const r = await fetch(endpoint, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ ping: true }),
    });
    return r.ok;
  } catch (_) {
    return false;
  }
}

const RADIUS = 16;
const BW_SOLID = 1.25;
const BW_DASH = 1.15;
const SOFT_SHADOW = '0 1px 3px rgba(0,0,0,.04), 0 4px 12px rgba(0,0,0,.06)';
const soft = (hex: string, alpha = 0.22) =>
  `color-mix(in srgb, ${hex} ${Math.round(alpha * 100)}%, white)`;
const tint = (hex: string, alpha = 0.08) =>
  `color-mix(in srgb, ${hex} ${Math.round(alpha * 100)}%, white)`;
const GRID_ROWS = '48px 1fr auto';
const GRID_COLS = '200px 1fr';
const HEADER_INPUT_MIN_WIDTH = 200;

const light = {
  bg: '#F7F7F2',
  surface: '#FFFFFF',
  subSurface: '#F3F4F6',
  ink: '#1F2937',
  muted: '#6B7280',
  border: '#E5E7EB',
};

const palette: Record<string, { primary: string; name: string }> = {
  ceo: { primary: '#5D7177', name: 'Ejecutivo (CEO)' },
  ia: { primary: '#7084B5', name: 'Plataforma IA' },
  cso: { primary: '#896D67', name: 'Estrategia (CSO)' },
  cto: { primary: '#9194A4', name: 'Tecnologia (CTO)' },
  ciso: { primary: '#7E9099', name: 'Seguridad (CISO)' },
  coo: { primary: '#C7A98C', name: 'Operaciones (COO)' },
  chro: { primary: '#EED1B8', name: 'RRHH (CHRO)' },
  cgo: { primary: '#B49495', name: 'Marketing y Ventas (CGO)' },
  cfo: { primary: '#899796', name: 'Finanzas (CFO)' },
  cdo: { primary: '#AAB7CA', name: 'Datos (CDO)' },
};

const i18n = {
  es: {
    search: 'Buscar...',
    login: 'INICIAR SESION',
    departments: 'Departamentos',
    org: 'Organigrama',
    executive: 'Ejecutivo',
    agents: 'agentes',
    hitl: 'HITL requiere aprobacion',
    eu: 'Datos UE',
    activity: 'Actividad',
    noact: 'Sin actividad aun.',
    footer: 'Gestiona IA sobre tu <sistema>. No sustituimos ERP/CRM.',
    privacy: 'Tus opciones de privacidad',
    cookies: 'Gestionar cookies',
    terms: 'Condiciones de uso',
    tm: 'Marcas registradas',
    eu_docs: 'Docs cumplimiento de la UE',
  },
};
const t = (k: string) => (i18n as any).es[k] || k;

const agentsByDept: Record<string, string[]> = {
  ceo: [
    'NEURA-CEO',
    'Agente: Agenda Consejo',
    'Agente: Anuncio Semanal',
    'Agente: Resumen Ejecutivo Diario',
    'Agente: Seguimiento OKR',
  ],
  ia: [
    'NEURA-IA',
    'Agente: Chequeo de Salud y Failover',
    'Agente: Cost Tracker',
    'Agente: Revision de Prompts',
    'Agente: Vigilancia de Cuotas',
  ],
  cso: [
    'NEURA-CSO',
    'Agente: Gestor de Riesgos',
    'Agente: Radar de Tendencias',
    'Agente: Sincronizacion de M&A',
    'Agente: Vigilancia Competitiva',
  ],
  cto: [
    'NEURA-CTO',
    'Agente: FinOps Cloud',
    'Agente: Observabilidad y SLO',
    'Agente: Gestion de Incidencias',
    'Agente: Seguridad CI/CD',
  ],
  ciso: [
    'NEURA-CISO',
    'Agente: Vulnerabilidades y Parches',
    'Agente: Phishing Triage',
    'Agente: Backup/Restore DR',
    'Agente: Recertificacion de Accesos',
  ],
  coo: [
    'NEURA-COO',
    'Agente: Atrasos y Excepciones',
    'Agente: Centro NPS/CSAT',
    'Agente: Latido de SLA',
    'Agente: Torre de Control',
  ],
  chro: [
    'NEURA-CHRO',
    'Agente: Encuesta de Pulso',
    'Agente: Offboarding Seguro',
    'Agente: Onboarding Orquestado',
    'Agente: Pipeline de Contratacion',
  ],
  cgo: [
    'NEURA-CGO',
    'Agente: Calendario de Contenidos',
    'Agente: Campanas de Email',
    'Agente: Lead Scoring + Enriquecimiento',
    'Agente: Ads ROI Optimizer',
  ],
  cfo: [
    'NEURA-CFO',
    'Agente: Dunning Inteligente',
    'Agente: Gasto Anomalo',
    'Agente: MRR/ARR Ledger',
    'Agente: Pronostico de Caja 30/90',
  ],
  cdo: [
    'NEURA-CDO',
    'Agente: Calidad de Datos',
    'Agente: Gobernanza/Privacidad (GDPR)',
    'Agente: Registro de Accesos a PII',
    'Agente: Catalogo y Linaje',
  ],
};

const agentDesc: Record<string, string[]> = {
  ceo: [
    'Consejero ejecutivo. Prioriza, resume y aprueba HITL.',
    'Prepara orden del dia y anexos para el consejo.',
    'Difunde comunicado semanal a toda la compania.',
    'Compila highlights diarios por area.',
    'Actualiza avance y riesgos de OKR.',
  ],
  ia: [
    'Director de plataforma IA. Gobierno tecnico y costes.',
    'Healthcheck de workers y failover automatico.',
    'Mide gasto por modelo/servicio y alerta variaciones.',
    'Versiona prompts y verifica calidad de respuestas.',
    'Controla limites/cuotas por proveedor.',
  ],
  cso: [
    'Asesor estrategico. Define foco y scorecards.',
    'Mapa de riesgos y owners, con planes de mitigacion.',
    'Deteccion de tendencias relevantes del sector.',
    'Sincroniza oportunidades de M&A/partnerships.',
    'Monitor de movimientos competitivos.',
  ],
  cto: [
    'Lidera ingenieria y releases.',
    'Optimiza gasto cloud y reservas.',
    'SLIs/SLOs y alertas de observabilidad.',
    'Gestion y postmortems de incidencias.',
    'Escaneos y gates de seguridad en CI/CD.',
  ],
  ciso: [
    'CISO virtual. Riesgos, compliance y respuesta.',
    'Ingesta CVEs y parcheo recomendado.',
    'Clasifica y enruta sospechas de phishing.',
    'Ejercicios de backup/restore y verificacion.',
    'Recertificacion periodica de accesos.',
  ],
  coo: [
    'COO virtual. Flujo, SLA y excepciones.',
    'Panel de retrasos y atascos.',
    'Hub de feedback NPS/CSAT.',
    'Heartbeat de acuerdos de nivel de servicio.',
    'Vista torre: capacidad y cuellos de botella.',
  ],
  chro: [
    'CHRO virtual. Talento y clima.',
    'Encuesta breve de clima.',
    'Offboarding con checklists y baja de accesos.',
    'Onboarding orquestado multi-equipo.',
    'Sincroniza pipeline de contratacion.',
  ],
  cgo: [
    'CGO virtual. Crecimiento y pipeline.',
    'Calendario editorial multi-canal.',
    'Automatiza campanas B2B.',
    'Scoring y enriquecimiento de leads.',
    'Optimiza ROAS de paid media.',
  ],
  cfo: [
    'CFO virtual. Salud financiera y cobros.',
    'Recordatorios y planes de cobro.',
    'Deteccion de gasto fuera de patron.',
    'Libro de metricas recurrentes.',
    'Proyeccion de caja 30/90 dias.',
  ],
  cdo: [
    'CDO virtual. Gobierno y linaje.',
    'Checks de calidad y contratos de datos.',
    'Politicas y cumplimiento GDPR.',
    'Log de accesos a datos sensibles (PII).',
    'Sincroniza catalogo y linaje.',
  ],
};

const seedRand = (seed = 17301) => {
  let s = seed >>> 0;
  return () => (s = (s * 1664525 + 1013904223) >>> 0) / 2 ** 32;
};
const initUsage = (rand: () => number) => ({
  tokens: 60 + Math.floor(rand() * 40),
  euro: parseFloat((0.02 + rand() * 0.03).toFixed(2)),
  ms: 400 + Math.floor(rand() * 220),
  calls: 1,
});

function IconStroke({ children, ink = '#1F2937' }: { children: any; ink?: string }) {
  return (
    <g stroke={ink} strokeWidth={1.75} fill='none' strokeLinecap='round' strokeLinejoin='round'>
      {children}
    </g>
  );
}

function Pictogram({ dept, ink = '#1F2937' }: { dept: string; ink?: string }) {
  switch (dept) {
    case 'ceo':
      return (
        <IconStroke ink={ink}>
          <circle cx='12' cy='12' r='6' />
          <circle cx='12' cy='12' r='2.2' />
          <path d='M12 3.5v3M12 17.5v3M3.5 12h3M17.5 12h3' />
          <path d='M7.8 7.8l2 2M14.2 14.2l2 2M7.8 16.2l2-2M14.2 9.8l2-2' />
        </IconStroke>
      );
    case 'ia':
      return (
        <IconStroke ink={ink}>
          <rect x='6' y='6' width='5' height='5' rx='1.25' />
          <rect x='13' y='6' width='5' height='5' rx='1.25' />
          <rect x='6' y='13' width='5' height='5' rx='1.25' />
          <rect x='13' y='13' width='5' height='5' rx='1.25' />
          <path d='M19.5 4.8v2.4M19.5 6h2.4M19.5 6h-2.4M19.5 6v-2.4' />
        </IconStroke>
      );
    case 'cso':
      return (
        <IconStroke ink={ink}>
          <circle cx='12' cy='12' r='6.5' />
          <circle cx='12' cy='12' r='3.25' />
          <path d='M12 12l4.2-3.6' />
          <path d='M16.2 8.4v2.6M16.2 8.4h-2.6' />
        </IconStroke>
      );
    case 'cto':
      return (
        <IconStroke ink={ink}>
          <rect x='7' y='7' width='10' height='10' rx='2' />
          <path d='M10 10h4v4h-4z' />
          <path d='M10 5v2M14 5v2M17 10h2M17 14h2M10 19v-2M14 19v-2M5 10h2M5 14h2' />
        </IconStroke>
      );
    case 'ciso':
      return (
        <IconStroke ink={ink}>
          <path d='M12 4l7 3v5a9 9 0 0 1-7 8a9 9 0 0 1-7-8V7z' />
          <path d='M9.2 12.2l2 2l4.1-4.1' />
        </IconStroke>
      );
    case 'coo':
      return (
        <IconStroke ink={ink}>
          <rect x='5' y='8' width='14' height='11' rx='2' />
          <path d='M8 6v4M16 6v4M5 11h14' />
          <path d='M8 14h3M13 14h3M8 17h3M13 17h3' />
        </IconStroke>
      );
    case 'chro':
      return (
        <IconStroke ink={ink}>
          <circle cx='12' cy='9' r='3' />
          <path d='M5 19c2.2-3.4 4.9-4.9 7-4.9s 4.8 1.5 7 4.9' />
        </IconStroke>
      );
    case 'cgo':
      return (
        <IconStroke ink={ink}>
          <path d='M6 12h6l5-3v8l-5-3H9' />
          <path d='M8.5 12v4l-2.5-1' />
          <path d='M18.4 10.1c1 .9 1 .9 0 1.8M19.6 9.2c1.3 1.2 1.3 1.2 0 2.4' />
        </IconStroke>
      );
    case 'cfo':
      return (
        <IconStroke ink={ink}>
          <rect x='6' y='9' width='12' height='8' rx='1.75' />
          <circle cx='12' cy='13' r='2.25' />
          <path d='M8 13h0M16 13h0' />
        </IconStroke>
      );
    case 'cdo':
      return (
        <IconStroke ink={ink}>
          <ellipse cx='12' cy='7.5' rx='6' ry='3' />
          <path d='M6 7.5v8.5c0 1.8 12 1.8 12 0V7.5' />
          <path d='M6 12c0 1.8 12 1.8 12 0' />
        </IconStroke>
      );
    default:
      return null;
  }
}

function DeptBadge({ dept, size = 28, title }: { dept: string; size?: number; title?: string }) {
  const primary = palette[dept].primary;
  return (
    <svg
      width={size}
      height={size}
      viewBox='0 0 26 26'
      aria-hidden={!title}
      role={title ? 'img' : undefined}
      aria-label={title || undefined}
      style={{ display: 'block' }}
    >
      <circle cx='13' cy='13' r='12' fill='#FFFFFF' stroke={primary} strokeWidth={2} />
      <circle cx='13' cy='13' r='9.5' fill='#FFFFFF' stroke='#E5E7EB' />
      <g transform='translate(1,1)'>
        <Pictogram dept={dept} ink={primary} />
      </g>
    </svg>
  );
}

function AgentCard({
  dept,
  name,
  desc,
  usage,
  theme,
  onRun,
  onPause,
  onConnectMake,
  showUsage,
  progress = -1,
  eta = 0,
}: {
  dept: string;
  name: string;
  desc: string;
  usage: any;
  theme: any;
  onRun: () => void;
  onPause: () => void;
  onConnectMake?: () => void;
  showUsage: boolean;
  progress?: number;
  eta?: number;
}) {
  const primary = palette[dept].primary;
  const active = progress >= 0 && progress < 100;
  return (
    <div
      className='rounded-xl p-2 flex flex-col gap-2'
      style={{
        color: primary,
        background: `linear-gradient(180deg, ${tint(primary, 0.06)} 0%, ${theme.surface} 100%)`,
        border: `${BW_SOLID}px solid ${soft(primary, 0.18)}`,
        boxShadow: active ? SOFT_SHADOW : `inset 0 0 0 1px ${theme.border}`,
      }}
    >
      <div className='flex items-center justify-between'>
        <div className='flex items-center gap-2'>
          <DeptBadge dept={dept} size={20} title={palette[dept].name} />
          <div className='font-semibold' style={{ color: theme.ink }}>
            {name}
          </div>
        </div>
        <span
          className='text-xs px-2 py-0.5 rounded-full'
          style={{
            border: `1px solid ${soft(primary, 0.28)}`,
            background: tint(primary, 0.12),
            color: theme.ink,
          }}
        >
          {active ? 'En ejecucion' : 'Activo'}
        </span>
      </div>
      <div className='text-xs -mt-1' style={{ color: theme.muted }}>
        {desc}
      </div>

      {active && (
        <div className='space-y-1'>
          <div
            aria-label='Progreso'
            role='progressbar'
            aria-valuemin={0}
            aria-valuemax={100}
            aria-valuenow={Math.round(progress)}
            className='h-2 w-full rounded-full'
            style={{ background: theme.subSurface, border: `1px solid ${theme.border}` }}
          >
            <div
              className='h-full rounded-full'
              style={{
                width: `${progress}%`,
                background: primary,
                transition: 'width 120ms linear',
              }}
            />
          </div>
          <div className='flex justify-between text-[11px]' style={{ color: theme.muted }}>
            <span>{Math.round(progress)}%</span>
            <span>ETA ~ {Math.max(0, Math.ceil(eta))}s</span>
          </div>
        </div>
      )}

      {showUsage && (
        <div className='flex flex-wrap gap-2 text-xs' style={{ color: theme.ink }}>
          <span
            className='rounded-md px-2 py-0.5'
            style={{ background: light.subSurface, border: `1px solid ${light.border}` }}
          >
            tokens: <b>{usage.tokens}</b>
          </span>
          <span
            className='rounded-md px-2 py-0.5'
            style={{ background: light.subSurface, border: `1px solid ${light.border}` }}
          >
            EUR: <b>{usage.euro.toFixed(2)}</b>
          </span>
          <span
            className='rounded-md px-2 py-0.5'
            style={{ background: light.subSurface, border: `1px solid ${light.border}` }}
          >
            tiempo: <b>{usage.ms} ms</b>
          </span>
          <span
            className='rounded-md px-2 py-0.5'
            style={{ background: light.subSurface, border: `1px solid ${light.border}` }}
          >
            llamadas: <b>{usage.calls}</b>
          </span>
        </div>
      )}

      <div className='flex gap-2'>
        <button
          onClick={onRun}
          className='px-3 py-1 rounded-lg text-white disabled:opacity-60'
          disabled={active}
          style={{ background: primary }}
        >
          Ejecutar
        </button>
        <button
          onClick={onPause}
          className='px-3 py-1 rounded-lg'
          style={{
            border: `1px solid ${light.border}`,
            background: light.surface,
            color: theme.ink,
          }}
        >
          Pausar
        </button>
        {onConnectMake && (
          <button
            onClick={onConnectMake}
            className='ml-auto px-3 py-1 rounded-lg'
            title='Conectar con Make'
            style={{
              border: `1px solid ${light.border}`,
              background: light.surface,
              color: theme.ink,
            }}
          >
            Conectar Make
          </button>
        )}
      </div>
    </div>
  );
}

const chatAriaLabel = (d: string) => `Chat ${palette[d].name}`;

function ChatMessage({
  msg,
  theme,
  tint,
  color,
  speak,
}: {
  msg: any;
  theme: any;
  tint: (c: string, a: number) => string;
  color: string;
  speak: (t: string) => void;
}) {
  const [copyText, setCopyText] = useState('Copiar codigo');

  const handleCopy = (code: string) => {
    try {
      const ta = document.createElement('textarea');
      ta.value = code;
      document.body.appendChild(ta);
      ta.select();
      document.execCommand('copy');
      document.body.removeChild(ta);
      setCopyText('Copiado');
      setTimeout(() => setCopyText('Copiar codigo'), 1500);
    } catch (_) {
      /* no-op */
    }
  };

  const chunks = String(msg.text || '').split('```');

  return (
    <div
      className={
        'flex items-start gap-2 ' + (msg.role === 'user' ? 'justify-end' : 'justify-start')
      }
    >
      {msg.role === 'assistant' && (
        <button
          onClick={() => speak && speak(msg.text)}
          className='p-1 rounded-full hover:bg-black/10 mt-1 flex-shrink-0'
          aria-label='Leer en voz alta'
        >
          <svg width='14' height='14' viewBox='0 0 24 24' fill='currentColor'>
            <path d='M3 9v6h4l5 5V4L7 9H3zm13.5 3c0-1.77-1.02-3.29-2.5-4.03v8.05c1.48-.73 2.5-2.25 2.5-4.02zM14 3.23v2.06c2.89.86 5 3.54 5 6.71s-2.11 5.85-5 6.71v2.06c4.01-.91 7-4.49 7-8.77s-2.99-7.86-7-8.77z' />
          </svg>
        </button>
      )}
      <div
        className='flex flex-col'
        style={{ alignItems: msg.role === 'user' ? 'flex-end' : 'flex-start' }}
      >
        <div
          className='inline-block px-3 py-1.5 rounded-lg max-w-sm'
          style={{
            background: msg.role === 'user' ? light.subSurface : tint(color, 0.18),
            color: theme.ink,
          }}
        >
          {chunks.map((chunk, i) => {
            if (i % 2 === 1) {
              const firstNl = chunk.indexOf('\n');
              const language = firstNl > -1 ? chunk.slice(0, firstNl) : 'text';
              const code = firstNl > -1 ? chunk.slice(firstNl + 1) : chunk;
              return (
                <div key={i} className='my-2 rounded-md' style={{ background: 'rgba(0,0,0,0.2)' }}>
                  <div
                    className='text-xs px-2 py-1 flex justify-between items-center'
                    style={{ color: theme.muted, background: 'rgba(0,0,0,0.1)' }}
                  >
                    <span>{language}</span>
                    <button
                      onClick={() => handleCopy(code)}
                      className='text-xs px-2 py-0.5 rounded'
                    >
                      {copyText}
                    </button>
                  </div>
                  <pre className='p-2 text-sm overflow-x-auto'>
                    <code>{code}</code>
                  </pre>
                </div>
              );
            }
            return (
              <span key={i} style={{ whiteSpace: 'pre-wrap', wordWrap: 'break-word' }}>
                {chunk}
              </span>
            );
          })}
        </div>

        {Array.isArray(msg.sources) && msg.sources.length > 0 && (
          <div className='text-xs mt-1.5 px-2' style={{ color: theme.muted }}>
            <span className='font-semibold'>Fuentes:</span>
            <ol className='list-decimal list-inside'>
              {msg.sources.map((s: any, idx: number) => (
                <li key={idx} className='truncate'>
                  <a
                    href={s.uri || s.url}
                    target='_blank'
                    rel='noopener noreferrer'
                    className='hover:underline'
                    title={s.title || s.name}
                  >
                    {s.title || s.name || s.uri || s.url}
                  </a>
                </li>
              ))}
            </ol>
          </div>
        )}
      </div>
    </div>
  );
}

function NeuraChatPanel({
  dept,
  color,
  theme,
  log,
  onClose,
  onSend,
  isLoading = false,
  speak,
  tint: tintFn = tint,
}: {
  dept: string;
  color: string;
  theme: any;
  log: any[];
  onClose: () => void;
  onSend: (t: string) => void;
  isLoading?: boolean;
  speak: (t: string) => void;
  tint?: (c: string, a: number) => string;
}) {
  const [txt, setTxt] = useState('');
  const [isListening, setIsListening] = useState(false);
  const recognitionRef = useRef<any>(null);
  const inputRef = useRef<HTMLInputElement | null>(null);
  const logEndRef = useRef<HTMLDivElement | null>(null);

  const SpeechRecognition: any =
    typeof window !== 'undefined' &&
    ((window as any).SpeechRecognition || (window as any).webkitSpeechRecognition);
  const speechSupported = !!SpeechRecognition;

  useEffect(() => {
    if (inputRef.current) inputRef.current.focus();
  }, []);
  useEffect(() => {
    const trap = (e: KeyboardEvent) => {
      if (e.key === 'Escape') {
        onClose();
      }
    };
    window.addEventListener('keydown', trap as any);
    return () => window.removeEventListener('keydown', trap as any);
  }, [onClose]);
  useEffect(() => {
    if (logEndRef.current) {
      logEndRef.current.scrollIntoView({ behavior: 'smooth' });
    }
  }, [log, isLoading]);

  useEffect(() => {
    if (!speechSupported) return;
    const recognition = new SpeechRecognition();
    recognition.continuous = false;
    recognition.interimResults = false;
    recognition.lang = 'es-ES';
    recognition.onresult = (ev: any) => {
      const tr = ev.results[0][0].transcript;
      setTxt(tr);
      onSend(tr);
    };
    recognition.onend = () => setIsListening(false);
    recognition.onerror = () => setIsListening(false);
    recognitionRef.current = recognition;
  }, [speechSupported, onSend]);

  const toggleMic = () => {
    if (!speechSupported) return;
    if (isListening) {
      recognitionRef.current && recognitionRef.current.stop();
    } else {
      recognitionRef.current && recognitionRef.current.start();
      setIsListening(true);
    }
  };
  const handleSend = () => {
    const v = String(txt || '').trim();
    if (!v) return;
    onSend(v);
    setTxt('');
  };

  const handleClear = () => {
    try {
      (window as any).speechSynthesis && (window as any).speechSynthesis.cancel();
    } catch (_) {}
    onSend('__clear__');
  };
  const handleRegenerate = () => {
    const lastUser = [...log].reverse().find((m: any) => m.role === 'user');
    if (lastUser) {
      onSend(lastUser.text);
    }
  };

  return (
    <div className='fixed inset-0 z-50' role='dialog' aria-label={chatAriaLabel(dept)}>
      <div
        className='absolute inset-0'
        style={{ background: 'rgba(0,0,0,.24)' }}
        onClick={onClose}
      />
      <aside
        className='absolute right-0 top-0 h-full flex flex-col'
        style={{ width: 420, background: theme.surface, borderLeft: '1px solid ' + theme.border }}
      >
        <div
          className='flex items-center justify-between px-3 py-2'
          style={{ borderBottom: '1px solid ' + theme.border }}
        >
          <div className='flex items-center gap-2'>
            <DeptBadge dept={dept} size={24} title={palette[dept].name} />
            <div className='font-semibold' style={{ color: theme.ink }}>
              {palette[dept].name} - Chat
            </div>
          </div>
          <div className='flex items-center gap-2'>
            <button
              className='text-xs px-2 py-1 rounded'
              onClick={handleRegenerate}
              title='Regenerar'
              style={{
                border: '1px solid ' + theme.border,
                background: theme.surface,
                color: theme.ink,
              }}
            >
              Regenerar
            </button>
            <button
              className='text-xs px-2 py-1 rounded'
              onClick={handleClear}
              title='Limpiar'
              style={{
                border: '1px solid ' + theme.border,
                background: theme.surface,
                color: theme.ink,
              }}
            >
              Limpiar
            </button>
            <button
              aria-label='Cerrar'
              className='px-2 py-1 rounded'
              onClick={onClose}
              style={{ border: '1px solid ' + theme.border }}
            >
              x
            </button>
          </div>
        </div>

        <div className='flex-1 p-2 space-y-2 overflow-auto'>
          {log.length === 0 && !isLoading && (
            <div
              className='text-sm p-2 rounded'
              style={{ color: theme.muted, background: theme.subSurface }}
            >
              Prueba a preguntar: "Cuales son las ultimas noticias de IA generativa?"
            </div>
          )}
          {log.map((m, i) => (
            <ChatMessage
              key={i}
              msg={m}
              theme={theme}
              tint={tintFn}
              color={color}
              speak={t => {
                try {
                  if ('speechSynthesis' in window) {
                    const u = new (window as any).SpeechSynthesisUtterance(String(t));
                    u.lang = 'es-ES';
                    (window as any).speechSynthesis.speak(u);
                  }
                } catch (_) {}
              }}
            />
          ))}
          {isLoading && (
            <div className='flex justify-start'>
              <span
                className='inline-block px-3 py-1.5 rounded-lg'
                style={{ background: tintFn(color, 0.18), color: theme.ink }}
              >
                <span className='flex gap-1 items-center'>
                  <span
                    className='w-1.5 h-1.5 bg-current rounded-full animate-bounce'
                    style={{ animationDelay: '0ms' }}
                  />
                  <span
                    className='w-1.5 h-1.5 bg-current rounded-full animate-bounce'
                    style={{ animationDelay: '150ms' }}
                  />
                  <span
                    className='w-1.5 h-1.5 bg-current rounded-full animate-bounce'
                    style={{ animationDelay: '300ms' }}
                  />
                </span>
              </span>
            </div>
          )}
          <div ref={logEndRef as any} />
        </div>

        <div className='p-2' style={{ borderTop: '1px solid ' + theme.border }}>
          <div className='flex gap-2'>
            <input
              ref={inputRef}
              value={txt}
              onChange={e => setTxt(e.target.value)}
              onKeyDown={e =>
                (e as any).key === 'Enter' && !(e as any).shiftKey
                  ? ((e as any).preventDefault(), handleSend())
                  : null
              }
              className='flex-1 rounded-lg px-2 py-1'
              placeholder={isListening ? 'Escuchando...' : 'Escribe o pulsa micro...'}
              style={{
                background: theme.surface,
                color: theme.ink,
                border: '1px solid ' + theme.border,
              }}
            />
            {speechSupported && (
              <button
                onClick={toggleMic}
                className={'px-2.5 py-1.5 rounded-lg ' + (isListening ? 'text-white' : '')}
                style={{
                  border: '1px solid ' + theme.border,
                  background: isListening ? '#EF4444' : theme.surface,
                }}
                title='Dictado por voz'
              >
                <svg width='18' height='18' viewBox='0 0 24 24' fill='currentColor'>
                  <path d='M12 14c1.66 0 3-1.34 3-3V5c0-1.66-1.34-3-3-3S9 3.34 9 5v6c1.66 0 3 1.34 3 3zm5.3-3c0 3-2.54 5.1-5.3 5.1S6.7 14 6.7 11H5c0 3.41 2.72 6.23 6 6.72V21h2v-3.28c3.28-.49 6-3.31 6-6.72h-1.7z' />
                </svg>
              </button>
            )}
            <button
              onClick={handleSend}
              className='px-4 py-1.5 rounded-lg text-white'
              style={{ background: color }}
            >
              Enviar
            </button>
          </div>
        </div>
      </aside>
    </div>
  );
}

function LoginForm({
  theme,
  primary,
  onCancel,
  onSuccess,
}: {
  theme: any;
  primary: string;
  onCancel: () => void;
  onSuccess: (u: { email: string }) => void;
}) {
  const [email, setEmail] = useState('');
  const [pwd, setPwd] = useState('');
  const [loading, setLoading] = useState(false);
  const valid = /.+@.+\..+/.test(email) && pwd.length >= 6;
  return (
    <form
      onSubmit={async e => {
        e.preventDefault();
        if (!valid) return;
        setLoading(true);
        try {
          await new Promise(r => setTimeout(r, 350));
          onSuccess({ email });
          if (typeof localStorage !== 'undefined')
            localStorage.setItem('ECONEURA_USER', JSON.stringify({ email }));
        } finally {
          setLoading(false);
        }
      }}
    >
      <label className='text-xs' style={{ color: theme.muted }}>
        Email
      </label>
      <input
        type='email'
        value={email}
        onChange={e => setEmail(e.target.value)}
        className='w-full mb-2 px-2 py-1 rounded'
        style={{ border: `1px solid ${light.border}`, background: theme.surface, color: theme.ink }}
      />
      <label className='text-xs' style={{ color: theme.muted }}>
        Contrasena
      </label>
      <input
        type='password'
        value={pwd}
        onChange={e => setPwd(e.target.value)}
        className='w-full mb-3 px-2 py-1 rounded'
        style={{ border: `1px solid ${light.border}`, background: theme.surface, color: theme.ink }}
      />
      <div className='flex gap-2 justify-end'>
        <button
          type='button'
          onClick={onCancel}
          className='px-3 py-1 rounded'
          style={{
            border: `1px solid ${light.border}`,
            background: theme.surface,
            color: theme.ink,
          }}
        >
          Cancelar
        </button>
        <button
          type='submit'
          disabled={!valid || loading}
          className='px-3 py-1 rounded text-white disabled:opacity-60'
          style={{ background: primary }}
        >
          {loading ? 'Accediendo...' : 'Entrar'}
        </button>
      </div>
    </form>
  );
}

function AiConfigModal({
  theme,
  open,
  onClose,
  endpoint,
  model,
  setEndpoint,
  setModel,
  onSave,
  status,
}: {
  theme: any;
  open: boolean;
  onClose: () => void;
  endpoint: string;
  model: string;
  setEndpoint: (v: string) => void;
  setModel: (v: string) => void;
  onSave: () => void;
  status: string;
}) {
  if (!open) return null;
  return (
    <div className='fixed inset-0 z-50 flex items-center justify-center'>
      <div
        className='absolute inset-0'
        style={{ background: 'rgba(0,0,0,.35)' }}
        onClick={onClose}
      />
      <div
        className='relative p-4 rounded-xl w-full max-w-sm'
        style={{ background: light.surface, border: '1px solid ' + light.border }}
      >
        <div className='flex items-center justify-between mb-2'>
          <h3 className='font-semibold' style={{ color: light.ink }}>
            Config AI
          </h3>
          <button
            onClick={onClose}
            className='px-2 py-1 rounded'
            style={{ border: '1px solid ' + light.border }}
          >
            x
          </button>
        </div>
        <label className='text-xs' style={{ color: light.muted }}>
          Endpoint
        </label>
        <input
          value={endpoint}
          onChange={e => setEndpoint(e.target.value)}
          className='w-full mb-2 px-2 py-1 rounded'
          style={{
            border: '1px solid ' + light.border,
            background: light.surface,
            color: light.ink,
          }}
        />
        <label className='text-xs' style={{ color: light.muted }}>
          Modelo
        </label>
        <input
          value={model}
          onChange={e => setModel(e.target.value)}
          className='w-full mb-2 px-2 py-1 rounded'
          style={{
            border: '1px solid ' + light.border,
            background: light.surface,
            color: light.ink,
          }}
        />
        <div className='flex items-center gap-2 text-xs' style={{ color: light.muted }}>
          Estado: <b style={{ color: status === 'ok' ? '#16A34A' : '#DC2626' }}>{status}</b>
        </div>
        <div className='mt-3 flex justify-end gap-2'>
          <button
            onClick={onClose}
            className='px-3 py-1 rounded'
            style={{ border: '1px solid ' + light.border }}
          >
            Cancelar
          </button>
          <button
            onClick={onSave}
            className='px-3 py-1 rounded text-white'
            style={{ background: '#111827' }}
          >
            Guardar
          </button>
        </div>
      </div>
    </div>
  );
}

export default function CockpitPreview() {
  const theme = light;
  const [dept, setDept] = useState<string>('ceo');
  const [view, setView] = useState<string>('dept');
  const [chatOpen, setChatOpen] = useState(false);
  const [chatLog, setChatLog] = useState<any[]>([]);
  const [isChatLoading, setIsChatLoading] = useState(false);
  const [feed, setFeed] = useState<any[]>([]);
  const [showAllUsage, setShowAllUsage] = useState(false);
  const [user, setUser] = useState<{ email: string } | null>(null);
  const [loginOpen, setLoginOpen] = useState(false);
  const [aiCfgOpen, setAiCfgOpen] = useState(false);
  const [aiStatus, setAiStatus] = useState('desconocido');
  const [aiEndpoint, setAiEndpoint] = useState(AI_ENDPOINT);
  const [aiModel, setAiModel] = useState(AI_MODEL);

  const searchRef = useRef<HTMLInputElement | null>(null);
  const primary = palette[dept].primary;
  const nav = useMemo(() => Object.keys(palette), []);

  const rand = useMemo(() => seedRand(17301), []);
  const [usage, setUsage] = useState<Record<string, any[]>>(() => {
    const base: Record<string, any[]> = {};
    nav.forEach(k => {
      base[k] = agentsByDept[k].map(() => initUsage(rand));
    });
    return base;
  });
  const [progress, setProgress] = useState<Record<string, number[]>>(() => {
    const base: Record<string, number[]> = {};
    nav.forEach(k => {
      base[k] = agentsByDept[k].map(() => -1);
    });
    return base;
  });
  const [etaMap, setEtaMap] = useState<Record<string, number[]>>(() => {
    const base: Record<string, number[]> = {};
    nav.forEach(k => {
      base[k] = agentsByDept[k].map(() => 0);
    });
    return base;
  });
  const timersRef = useRef<Record<string, any>>({});

  function time() {
    const d = new Date();
    return d.toLocaleTimeString('es-ES', { hour: '2-digit', minute: '2-digit' });
  }
  function log(kind: string, msg: string) {
    setFeed(f => [...f, { ts: time(), dept, kind, msg }]);
  }
  function speak(text: string) {
    try {
      if ('speechSynthesis' in window) {
        (window as any).speechSynthesis.cancel();
        const u = new (window as any).SpeechSynthesisUtterance(String(text));
        u.lang = 'es-ES';
        (window as any).speechSynthesis.speak(u);
      }
    } catch (_) {}
  }
  function buildMessages(prompt: string) {
    if (prompt === '__clear__') {
      setChatLog([]);
      return null;
    }
    const sys = `ECONEURA cockpit. Gestiona IA sobre tu stack. No sustituimos ERP/CRM. Depto activo: ${palette[dept].name}. Responde en espanol y en 3 bullets + 1 ejemplo + 2 pasos.`;
    const history = chatLog.map(m => ({ role: m.role, content: m.text }));
    return [{ role: 'system', content: sys }, ...history, { role: 'user', content: prompt }];
  }
  async function sendToNeura(prompt: string) {
    const msgs = buildMessages(prompt);
    if (!msgs) {
      return;
    }
    setChatLog(l => [...l, { role: 'user', text: prompt }]);
    setIsChatLoading(true);
    try {
      const r = await fetch(aiEndpoint, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ model: aiModel, messages: msgs }),
      });
      if (!r.ok) throw new Error('AI endpoint error');
      const data = await r.json();
      const text =
        (data && (data.text || data.message)) ||
        (data?.choices && data.choices[0]?.message?.content) ||
        (typeof data === 'string' ? data : 'Respuesta lista.');
      setChatLog(l => [...l, { role: 'assistant', text: String(text) }]);
      speak(String(text));
    } catch (err) {
      log('warn', 'Fallo API AI. Usando respuesta simulada.');
      setTimeout(() => {
        const fallback = `${palette[dept].name}: 3 highlights - 2 riesgos - 1 accion prioritaria.`;
        setChatLog(l => [...l, { role: 'assistant', text: fallback }]);
        speak(fallback);
      }, 200);
    } finally {
      setIsChatLoading(false);
    }
  }
  function openNeura(prompt?: string) {
    setChatOpen(true);
    if (prompt) {
      sendToNeura(prompt);
    }
  }
  function runAgent(i: number, name: string) {
    setUsage(u => {
      const copy: Record<string, any[]> = { ...u };
      const arr = [...copy[dept]];
      const cur = { ...arr[i] };
      cur.tokens += Math.floor(rand() * 40) + 10;
      cur.ms += Math.floor(rand() * 400) + 120;
      cur.calls += 1;
      cur.euro = parseFloat((cur.euro + rand() * 0.06).toFixed(2));
      arr[i] = cur;
      copy[dept] = arr;
      return copy;
    });
    const dur = 3 + Math.floor(rand() * 5);
    setEtaMap(m => {
      const c: Record<string, number[]> = { ...m };
      const a = [...c[dept]];
      a[i] = dur;
      c[dept] = a;
      return c;
    });
    setProgress(p => {
      const c: Record<string, number[]> = { ...p };
      const a = [...c[dept]];
      a[i] = 0;
      c[dept] = a;
      return c;
    });
    const key = `${dept}:${i}`;
    if (timersRef.current[key]) clearInterval(timersRef.current[key]);
    timersRef.current[key] = setInterval(() => {
      setProgress(p => {
        const c: Record<string, number[]> = { ...p };
        const a = [...c[dept]];
        const v = Math.min(100, (a[i] || 0) + 100 / (dur * 10));
        a[i] = v;
        c[dept] = a;
        return c;
      });
      setEtaMap(m => {
        const c: Record<string, number[]> = { ...m };
        const a = [...c[dept]];
        a[i] = Math.max(0, (a[i] || dur) - 0.1);
        c[dept] = a;
        return c;
      });
    }, 100);
    setTimeout(() => {
      clearInterval(timersRef.current[key]);
      setProgress(p => {
        const c: Record<string, number[]> = { ...p };
        const a = [...c[dept]];
        a[i] = -1;
        c[dept] = a;
        return c;
      });
      setEtaMap(m => {
        const c: Record<string, number[]> = { ...m };
        const a = [...c[dept]];
        a[i] = 0;
        c[dept] = a;
        return c;
      });
      const r = rand();
      if (r < 0.08) {
        log('err', "'" + name + "' fallo");
      } else if (r < 0.2) {
        log('warn', "'" + name + "' requiere aprobacion (HITL)");
      } else {
        log('ok', "'" + name + "' completado");
      }
    }, dur * 1000);
  }

  useEffect(() => {
    const h = (e: KeyboardEvent) => {
      const k = (e.key || '').toLowerCase();
      if (k === '/') {
        e.preventDefault();
        if (searchRef.current) searchRef.current.focus();
      }
      if (k === 'o') {
        setView('org');
      }
      if (k === 'escape' && chatOpen) {
        setChatOpen(false);
      }
    };
    window.addEventListener('keydown', h as any);
    return () => window.removeEventListener('keydown', h as any);
  }, [chatOpen]);

  useEffect(() => {
    (async () => {
      setAiStatus((await pingAI()) ? 'ok' : 'sin_endpoint');
    })();
    try {
      const u =
        typeof localStorage !== 'undefined'
          ? JSON.parse(localStorage.getItem('ECONEURA_USER') || 'null')
          : null;
      if (u) {
        setUser(u);
      }
    } catch (_) {
      /*noop*/
    }
  }, []);

  const showUsageAll = showAllUsage || dept === 'ia';

  const handleSaveAiCfg = async () => {
    setAIConfig({ endpoint: aiEndpoint, model: aiModel });
    setAiStatus((await pingAI(aiEndpoint)) ? 'ok' : 'sin_endpoint');
    setAiCfgOpen(false);
  };

  return (
    <div
      className='min-h-screen grid'
      style={{ gridTemplateRows: GRID_ROWS, background: theme.bg, color: theme.ink }}
    >
      <header
        className='flex items-center gap-3 px-3'
        style={{
          background: theme.surface,
          borderBottomColor: primary,
          borderBottomWidth: 2,
          borderBottomStyle: 'solid',
        }}
      >
        <div className='flex items-center gap-2 font-semibold'>
          <span
            style={{
              width: 24,
              height: 24,
              display: 'inline-block',
              borderRadius: 9999,
              background: '#fff',
              border: `2px solid ${primary}`,
            }}
          />
          <span>ECONEURA</span>
        </div>
        <div
          className='ml-auto flex items-center gap-2 rounded-lg px-2 py-1'
          style={{
            border: `1px solid ${theme.border}`,
            background: theme.surface,
            minWidth: HEADER_INPUT_MIN_WIDTH,
          }}
        >
          <svg width='16' height='16' viewBox='0 0 24 24'>
            <path
              d='M11 4a7 7 0 105.29 12.29l3.7 3.7 1.41-1.41-3.7-3.7A7 7 0 0011 4z'
              fill='none'
              stroke='#94A3B8'
            />
          </svg>
          <input
            ref={searchRef}
            className='outline-none w-full'
            aria-label={t('search')}
            placeholder={t('search')}
            style={{ background: 'transparent', color: theme.ink }}
          />
        </div>
        <button
          className='px-2 py-1 rounded'
          onClick={() => setAiCfgOpen(true)}
          title='Config AI'
          style={{ border: `1px solid ${theme.border}` }}
        >
          AI
        </button>
        <div className='flex items-center gap-2'>
          {!user ? (
            <button
              className='rounded-lg px-3 py-1'
              onClick={() => setLoginOpen(true)}
              style={{
                border: `1px solid ${theme.border}`,
                background: theme.surface,
                color: theme.ink,
              }}
            >
              {t('login')}
            </button>
          ) : (
            <div className='flex items-center gap-2'>
              <span className='text-xs' title={user.email} style={{ color: theme.muted }}>
                Conectado
              </span>
              <button
                className='rounded-lg px-3 py-1'
                onClick={() => {
                  setUser(null);
                  try {
                    if (typeof localStorage !== 'undefined')
                      localStorage.removeItem('ECONEURA_USER');
                  } catch (_) {}
                }}
                style={{
                  border: `1px solid ${theme.border}`,
                  background: theme.surface,
                  color: theme.ink,
                }}
              >
                SALIR
              </button>
            </div>
          )}
        </div>
      </header>

      <main className='grid min-h-0' style={{ gridTemplateColumns: GRID_COLS }}>
        <aside
          className='p-3 overflow-auto'
          style={{ background: theme.surface, borderRight: `1px solid ${theme.border}` }}
        >
          <h6 className='text-xs mb-2' style={{ color: theme.muted }}>
            {t('departments')}
          </h6>
          <nav className='space-y-2'>
            {nav.map(k => (
              <button
                key={k}
                onClick={() => {
                  setDept(k);
                  setView('dept');
                }}
                className='w-full flex items-center gap-3 px-3 py-2 rounded-xl text-left hover:shadow-sm focus:shadow-sm transition-shadow transition-transform active:scale-95 focus:outline-none focus:ring-2 focus:ring-offset-1'
                style={{
                  border: `${BW_SOLID}px solid ${soft(palette[k].primary, 0.28)}`,
                  background: k === dept ? tint(palette[k].primary, 0.1) : theme.surface,
                  outline: k === dept ? `2px solid ${soft(palette[k].primary, 0.44)}` : 'none',
                  outlineOffset: 3,
                }}
              >
                <DeptBadge dept={k} size={24} title={palette[k].name} />
                <span className='truncate font-medium' style={{ color: theme.ink }}>
                  {palette[k].name}
                </span>
              </button>
            ))}
          </nav>
          <div className='mt-3 pt-3' style={{ borderTop: `1px solid ${theme.border}` }}>
            <button
              onClick={() => setView('org')}
              className='w-full flex items-center gap-3 px-3 py-2 rounded-xl transition-transform active:scale-95 focus:outline-none focus:ring-2 focus:ring-offset-1'
              style={{ background: theme.surface, border: `1.5px solid ${theme.border}` }}
            >
              <svg width={24} height={24} viewBox='0 0 24 24'>
                <g
                  stroke={theme.ink}
                  strokeWidth={1.75}
                  fill='none'
                  strokeLinecap='round'
                  strokeLinejoin='round'
                >
                  <rect x='8' y='3' width='8' height='6' rx='1' />
                  <rect x='3' y='15' width='8' height='6' rx='1' />
                  <rect x='13' y='15' width='8' height='6' rx='1' />
                  <path d='M12 9v6' />
                  <path d='M7 15v-2h10v2' />
                </g>
              </svg>
              <span style={{ color: theme.ink }}>{t('org')}</span>
            </button>
            <div className='mt-3 flex items-center gap-2 text-xs' style={{ color: theme.muted }}>
              <input
                id='toggle-usage'
                type='checkbox'
                checked={showAllUsage}
                onChange={e => setShowAllUsage((e.target as any).checked)}
              />
              <label htmlFor='toggle-usage'>Mostrar consumo IA en todos</label>
            </div>
          </div>
        </aside>

        <section className='p-3 flex flex-col gap-2 overflow-auto'>
          {view === 'org' ? (
            <div className='grid gap-3 grid-cols-1 md:grid-cols-2 xl:grid-cols-3'>
              {nav.map(d => (
                <div
                  key={d}
                  className='p-3'
                  style={{
                    background: theme.surface,
                    borderRadius: RADIUS,
                    border: `${BW_SOLID}px solid ${soft(palette[d].primary, 0.22)}`,
                    boxShadow: 'inset 0 0 0 1px #EAECEF',
                  }}
                >
                  <div className='flex items-center gap-2 mb-2'>
                    <DeptBadge dept={d} size={24} title={palette[d].name} />
                    <div className='font-semibold' style={{ color: theme.ink }}>
                      {palette[d].name}
                    </div>
                    <span className='ml-2 text-xs' style={{ color: theme.muted }}>
                      {agentsByDept[d].length} {t('agents')}
                    </span>
                  </div>
                  <ul className='space-y-2' aria-live='polite'>
                    {agentsByDept[d].map((a, i) => (
                      <li
                        key={a}
                        className='text-sm rounded-lg px-2 py-1'
                        style={{
                          border: `${BW_DASH}px dashed ${soft(palette[d].primary, 0.18)}`,
                          boxShadow: 'inset 0 0 0 1px #EAECEF',
                          color: theme.ink,
                        }}
                      >
                        <div className='flex items-center gap-2'>
                          <span
                            className='w-2 h-2 rounded-full'
                            style={{ background: palette[d].primary }}
                          />{' '}
                          <span className='font-medium'>{a}</span>
                        </div>
                        <div className='text-xs' style={{ color: theme.muted, marginLeft: 16 }}>
                          {agentDesc[d][i]}
                        </div>
                      </li>
                    ))}
                  </ul>
                </div>
              ))}
            </div>
          ) : (
            <>
              <div className='flex items-center gap-3'>
                <div className='w-2.5 h-8 rounded bg-current' style={{ color: primary }} />
                <div>
                  <div
                    className='font-semibold flex items-center gap-2'
                    style={{ color: theme.ink }}
                  >
                    <DeptBadge dept={dept} size={28} title={palette[dept].name} />{' '}
                    {palette[dept].name}
                  </div>
                  <div className='mt-1 flex flex-wrap gap-2 text-xs'>
                    <span
                      className='px-2 py-0.5 rounded-full'
                      style={{
                        border: `1px solid ${theme.border}`,
                        background: theme.surface,
                        color: theme.ink,
                      }}
                    >
                      {agentsByDept[dept].length} {t('agents')}
                    </span>
                    <span
                      className='px-2 py-0.5 rounded-full'
                      style={{
                        border: `1px solid ${soft(primary, 0.35)}`,
                        background: tint(primary, 0.18),
                        color: theme.ink,
                      }}
                    >
                      {t('hitl')}
                    </span>
                    <span
                      className='px-2 py-0.5 rounded-full'
                      style={{
                        border: `1px solid ${soft(primary, 0.35)}`,
                        background: tint(primary, 0.12),
                        color: theme.ink,
                      }}
                    >
                      {t('eu')}
                    </span>
                  </div>
                </div>
              </div>

              {(() => {
                const [execName, ...rest] = agentsByDept[dept];
                return (
                  <>
                    <div
                      className='rounded-xl p-3 flex flex-col gap-3 mt-3'
                      style={{
                        color: primary,
                        background: theme.surface,
                        border: `${BW_DASH}px dashed ${soft(primary, 0.22)}`,
                        boxShadow: `inset 0 0 0 1px ${theme.border}`,
                      }}
                      onMouseEnter={e =>
                        ((e.currentTarget as HTMLDivElement).style.boxShadow = SOFT_SHADOW)
                      }
                      onMouseLeave={e =>
                        ((e.currentTarget as HTMLDivElement).style.boxShadow =
                          `inset 0 0 0 1px ${theme.border}`)
                      }
                    >
                      <div className='flex items-center justify-between'>
                        <div className='flex items-center gap-2'>
                          <DeptBadge dept={dept} size={24} title={palette[dept].name} />
                          <div className='font-semibold' style={{ color: theme.ink }}>
                            {execName}
                          </div>
                        </div>
                        <span
                          className='text-xs px-2 py-0.5 rounded-full'
                          style={{
                            border: `1px solid ${soft(primary, 0.3)}`,
                            background: tint(primary, 0.14),
                            color: theme.ink,
                          }}
                        >
                          {t('executive')}
                        </span>
                      </div>
                      <div className='text-sm' style={{ color: theme.muted }}>
                        {agentDesc[dept][0]}
                      </div>
                      <div className='flex gap-2'>
                        <button
                          className='px-3 py-1 rounded-lg text-white transition-transform active:scale-95 focus:outline-none focus:ring-2 focus:ring-offset-1'
                          style={{ background: primary }}
                          onClick={() => openNeura()}
                        >
                          Abrir chat
                        </button>
                        <button
                          className='px-3 py-1 rounded-lg transition-transform active:scale-95 focus:outline-none focus:ring-2 focus:ring-offset-1'
                          style={{
                            border: `1px solid ${theme.border}`,
                            background: theme.surface,
                            color: theme.ink,
                          }}
                        >
                          Ver registro
                        </button>
                      </div>
                    </div>

                    <div className='grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-3'>
                      {rest.map((name, idx) => {
                        const i = idx + 1;
                        const u = usage[dept] ? usage[dept][i] : {};
                        return (
                          <AgentCard
                            key={name}
                            dept={dept}
                            name={name}
                            desc={agentDesc[dept][i]}
                            usage={u}
                            theme={theme}
                            showUsage={showUsageAll}
                            onRun={() => runAgent(i, name)}
                            onPause={() => log('info', "'" + name + "' en pausa")}
                            progress={progress[dept] ? progress[dept][i] : -1}
                            eta={etaMap[dept] ? etaMap[dept][i] : 0}
                          />
                        );
                      })}
                    </div>
                  </>
                );
              })()}

              <div
                className='rounded-xl p-3 max-h-60 overflow-auto'
                style={{ background: theme.surface, border: `1px solid ${theme.border}` }}
              >
                <div className='font-semibold' style={{ color: theme.ink, marginBottom: 8 }}>
                  {t('activity')}
                </div>
                {feed.length === 0 && (
                  <div className='text-sm' style={{ color: theme.muted }}>
                    {t('noact')}
                  </div>
                )}
                <ul className='space-y-2' aria-live='polite'>
                  {feed
                    .slice()
                    .reverse()
                    .map((e, i) => (
                      <li key={i} className='flex gap-2 text-sm' style={{ color: theme.ink }}>
                        <span
                          className='mt-1 w-2 h-2 rounded-full'
                          style={{
                            background:
                              e.kind === 'ok'
                                ? '#16A34A'
                                : e.kind === 'warn'
                                  ? '#EAB308'
                                  : e.kind === 'err'
                                    ? '#DC2626'
                                    : '#9CA3AF',
                          }}
                        />
                        <div>
                          <div className='text-xs' style={{ color: theme.muted }}>
                            [{e.ts}] {String(e.dept || dept).toUpperCase()}
                          </div>
                          <div>{e.msg}</div>
                        </div>
                      </li>
                    ))}
                </ul>
              </div>

              <div
                className='text-xs'
                style={{
                  color: theme.muted,
                  borderTop: `1px dashed ${theme.border}`,
                  paddingTop: 8,
                }}
              >
                GDPR & AI Act · datos en la UE · TLS 1.2+ y AES-256 · auditoria HITL.{' '}
                {i18n.es.footer}
              </div>
            </>
          )}

          {chatOpen && (
            <NeuraChatPanel
              dept={dept}
              color={primary}
              theme={theme}
              log={chatLog}
              onClose={() => setChatOpen(false)}
              onSend={sendToNeura}
              isLoading={isChatLoading}
              speak={speak}
            />
          )}

          {loginOpen && (
            <div className='fixed inset-0 z-50 flex items-center justify-center'>
              <div
                className='absolute inset-0'
                style={{ background: 'rgba(0,0,0,.35)' }}
                onClick={() => setLoginOpen(false)}
              />
              <div
                className='relative p-4 rounded-xl w-full max-w-sm'
                style={{ background: light.surface, border: '1px solid ' + light.border }}
              >
                <div className='flex items-center justify-between mb-2'>
                  <h3 className='font-semibold' style={{ color: light.ink }}>
                    Acceso ECONEURA
                  </h3>
                  <button
                    onClick={() => setLoginOpen(false)}
                    className='px-2 py-1 rounded'
                    style={{ border: '1px solid ' + light.border }}
                  >
                    x
                  </button>
                </div>
                <LoginForm
                  theme={theme}
                  primary={primary}
                  onCancel={() => setLoginOpen(false)}
                  onSuccess={u => {
                    setUser(u);
                    setLoginOpen(false);
                  }}
                />
              </div>
            </div>
          )}

          {aiCfgOpen && (
            <AiConfigModal
              theme={theme}
              open={aiCfgOpen}
              onClose={() => setAiCfgOpen(false)}
              endpoint={aiEndpoint}
              model={aiModel}
              setEndpoint={setAiEndpoint}
              setModel={setAiModel}
              onSave={handleSaveAiCfg}
              status={aiStatus}
            />
          )}
        </section>
      </main>

      <footer
        className='text-xs px-3 py-2'
        style={{
          background: `color-mix(in srgb, ${theme.surface} 95%, ${primary})`,
          borderTop: `1px solid ${theme.border}`,
          color: theme.ink,
        }}
      >
        <div className='flex flex-wrap items-center gap-2'>
          <span>Espanol (Espana)</span>
          <span role='separator' aria-hidden>
            ·
          </span>
          <a href='#' className='hover:underline' style={{ color: theme.ink }}>
            {i18n.es.privacy}
          </a>
          <span role='separator' aria-hidden>
            ·
          </span>
          <a href='#' className='hover:underline' style={{ color: theme.ink }}>
            {i18n.es.cookies}
          </a>
          <span role='separator' aria-hidden>
            ·
          </span>
          <a href='#' className='hover:underline' style={{ color: theme.ink }}>
            {i18n.es.terms}
          </a>
          <span role='separator' aria-hidden>
            ·
          </span>
          <a href='#' className='hover:underline' style={{ color: theme.ink }}>
            {i18n.es.tm}
          </a>
          <span role='separator' aria-hidden>
            ·
          </span>
          <a href='#' className='hover:underline' style={{ color: theme.ink }}>
            {i18n.es.eu_docs}
          </a>
          <span role='separator' aria-hidden>
            ·
          </span>
          <span>&#169; ECONEURA 2025</span>
        </div>
      </footer>
    </div>
  );
}
