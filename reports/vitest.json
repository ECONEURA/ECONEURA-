{"numTotalTestSuites":66,"numPassedTestSuites":66,"numFailedTestSuites":0,"numPendingTestSuites":0,"numTotalTests":114,"numPassedTests":114,"numFailedTests":0,"numPendingTests":0,"numTodoTests":0,"snapshot":{"added":0,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0,"didUpdate":false},"startTime":1759162275645,"success":true,"testResults":[{"assertionResults":[{"ancestorTitles":["Middleware Module","corsMiddleware"],"fullName":"Middleware Module corsMiddleware should set CORS headers for regular requests","status":"passed","title":"should set CORS headers for regular requests","duration":9.507272000000057,"failureMessages":[],"meta":{}},{"ancestorTitles":["Middleware Module","corsMiddleware"],"fullName":"Middleware Module corsMiddleware should handle OPTIONS requests","status":"passed","title":"should handle OPTIONS requests","duration":0.9276719999998022,"failureMessages":[],"meta":{}},{"ancestorTitles":["Middleware Module","corsMiddleware"],"fullName":"Middleware Module corsMiddleware should use custom origin","status":"passed","title":"should use custom origin","duration":0.6512259999999515,"failureMessages":[],"meta":{}},{"ancestorTitles":["Middleware Module","requestLogger"],"fullName":"Middleware Module requestLogger should log requests","status":"passed","title":"should log requests","duration":16.722655999999915,"failureMessages":[],"meta":{}},{"ancestorTitles":["Middleware Module","errorHandler"],"fullName":"Middleware Module errorHandler should intercept error status codes and set content type","status":"passed","title":"should intercept error status codes and set content type","duration":1.0180210000000898,"failureMessages":[],"meta":{}},{"ancestorTitles":["Middleware Module","errorHandler"],"fullName":"Middleware Module errorHandler should not set content type for successful responses","status":"passed","title":"should not set content type for successful responses","duration":1.2403269999999793,"failureMessages":[],"meta":{}}],"startTime":1759162277636,"endTime":1759162277666.2402,"status":"passed","message":"","name":"/workspaces/ECONEURA-/packages/shared/src/__tests__/middleware.test.ts"},{"assertionResults":[{"ancestorTitles":["Middleware Module","corsMiddleware"],"fullName":"Middleware Module corsMiddleware should set CORS headers for regular requests","status":"passed","title":"should set CORS headers for regular requests","duration":9.95526899999993,"failureMessages":[],"meta":{}},{"ancestorTitles":["Middleware Module","corsMiddleware"],"fullName":"Middleware Module corsMiddleware should handle OPTIONS requests","status":"passed","title":"should handle OPTIONS requests","duration":1.3095950000000585,"failureMessages":[],"meta":{}},{"ancestorTitles":["Middleware Module","corsMiddleware"],"fullName":"Middleware Module corsMiddleware should use custom origin","status":"passed","title":"should use custom origin","duration":0.7190530000000308,"failureMessages":[],"meta":{}},{"ancestorTitles":["Middleware Module","requestLogger"],"fullName":"Middleware Module requestLogger should log requests","status":"passed","title":"should log requests","duration":21.010483000000022,"failureMessages":[],"meta":{}},{"ancestorTitles":["Middleware Module","errorHandler"],"fullName":"Middleware Module errorHandler should intercept error status codes and set content type","status":"passed","title":"should intercept error status codes and set content type","duration":1.077902999999992,"failureMessages":[],"meta":{}},{"ancestorTitles":["Middleware Module","errorHandler"],"fullName":"Middleware Module errorHandler should not set content type for successful responses","status":"passed","title":"should not set content type for successful responses","duration":0.6563660000000482,"failureMessages":[],"meta":{}}],"startTime":1759162279044,"endTime":1759162279080.6562,"status":"passed","message":"","name":"/workspaces/ECONEURA-/packages/shared/src/__tests__/middleware.test.ts"},{"assertionResults":[{"ancestorTitles":["Middleware Module","corsMiddleware"],"fullName":"Middleware Module corsMiddleware should set CORS headers for regular requests","status":"passed","title":"should set CORS headers for regular requests","duration":8.234035000000063,"failureMessages":[],"meta":{}},{"ancestorTitles":["Middleware Module","corsMiddleware"],"fullName":"Middleware Module corsMiddleware should handle OPTIONS requests","status":"passed","title":"should handle OPTIONS requests","duration":1.232221000000095,"failureMessages":[],"meta":{}},{"ancestorTitles":["Middleware Module","corsMiddleware"],"fullName":"Middleware Module corsMiddleware should use custom origin","status":"passed","title":"should use custom origin","duration":0.6546630000000278,"failureMessages":[],"meta":{}},{"ancestorTitles":["Middleware Module","requestLogger"],"fullName":"Middleware Module requestLogger should log requests","status":"passed","title":"should log requests","duration":16.665228999999954,"failureMessages":[],"meta":{}},{"ancestorTitles":["Middleware Module","errorHandler"],"fullName":"Middleware Module errorHandler should intercept error status codes and set content type","status":"passed","title":"should intercept error status codes and set content type","duration":1.2130650000000287,"failureMessages":[],"meta":{}},{"ancestorTitles":["Middleware Module","errorHandler"],"fullName":"Middleware Module errorHandler should not set content type for successful responses","status":"passed","title":"should not set content type for successful responses","duration":0.7010290000000623,"failureMessages":[],"meta":{}}],"startTime":1759162279047,"endTime":1759162279076.701,"status":"passed","message":"","name":"/workspaces/ECONEURA-/packages/shared/src/__tests__/middleware.test.ts"},{"assertionResults":[{"ancestorTitles":["RateLimiter","constructor"],"fullName":"RateLimiter constructor should create with default values","status":"passed","title":"should create with default values","duration":2.7852609999999913,"failureMessages":[],"meta":{}},{"ancestorTitles":["RateLimiter","constructor"],"fullName":"RateLimiter constructor should create with custom values","status":"passed","title":"should create with custom values","duration":0.5007040000000416,"failureMessages":[],"meta":{}},{"ancestorTitles":["RateLimiter","isAllowed"],"fullName":"RateLimiter isAllowed should allow first request","status":"passed","title":"should allow first request","duration":0.5778290000000652,"failureMessages":[],"meta":{}},{"ancestorTitles":["RateLimiter","isAllowed"],"fullName":"RateLimiter isAllowed should allow requests within limit","status":"passed","title":"should allow requests within limit","duration":0.370480999999927,"failureMessages":[],"meta":{}},{"ancestorTitles":["RateLimiter","isAllowed"],"fullName":"RateLimiter isAllowed should block requests over limit","status":"passed","title":"should block requests over limit","duration":0.3888770000000932,"failureMessages":[],"meta":{}},{"ancestorTitles":["RateLimiter","isAllowed"],"fullName":"RateLimiter isAllowed should reset after window expires","status":"passed","title":"should reset after window expires","duration":3.301394000000073,"failureMessages":[],"meta":{}},{"ancestorTitles":["RateLimiter","isAllowed"],"fullName":"RateLimiter isAllowed should handle different keys independently","status":"passed","title":"should handle different keys independently","duration":0.483161999999993,"failureMessages":[],"meta":{}},{"ancestorTitles":["RateLimiter","getRemainingRequests"],"fullName":"RateLimiter getRemainingRequests should return max requests for new key","status":"passed","title":"should return max requests for new key","duration":0.3953280000000632,"failureMessages":[],"meta":{}},{"ancestorTitles":["RateLimiter","getRemainingRequests"],"fullName":"RateLimiter getRemainingRequests should decrease remaining requests","status":"passed","title":"should decrease remaining requests","duration":0.44833700000003773,"failureMessages":[],"meta":{}},{"ancestorTitles":["RateLimiter","getRemainingRequests"],"fullName":"RateLimiter getRemainingRequests should not go below zero","status":"passed","title":"should not go below zero","duration":0.5255110000000514,"failureMessages":[],"meta":{}},{"ancestorTitles":["RateLimiter","getResetTime"],"fullName":"RateLimiter getResetTime should return future time for new key","status":"passed","title":"should return future time for new key","duration":0.48652900000001864,"failureMessages":[],"meta":{}},{"ancestorTitles":["RateLimiter","getResetTime"],"fullName":"RateLimiter getResetTime should return same reset time for existing key","status":"passed","title":"should return same reset time for existing key","duration":0.3614549999999781,"failureMessages":[],"meta":{}},{"ancestorTitles":["RateLimiter","clear"],"fullName":"RateLimiter clear should clear all entries","status":"passed","title":"should clear all entries","duration":0.5056339999998727,"failureMessages":[],"meta":{}},{"ancestorTitles":["createRateLimitMiddleware"],"fullName":"createRateLimitMiddleware should allow requests within limit","status":"passed","title":"should allow requests within limit","duration":4.52550999999994,"failureMessages":[],"meta":{}},{"ancestorTitles":["createRateLimitMiddleware"],"fullName":"createRateLimitMiddleware should block requests over limit","status":"passed","title":"should block requests over limit","duration":4.022159999999985,"failureMessages":[],"meta":{}},{"ancestorTitles":["createRateLimitMiddleware"],"fullName":"createRateLimitMiddleware should use custom key function","status":"passed","title":"should use custom key function","duration":0.8214239999999791,"failureMessages":[],"meta":{}},{"ancestorTitles":["createRateLimitMiddleware"],"fullName":"createRateLimitMiddleware should use anonymous key by default","status":"passed","title":"should use anonymous key by default","duration":0.462673999999879,"failureMessages":[],"meta":{}}],"startTime":1759162277638,"endTime":1759162277660.4626,"status":"passed","message":"","name":"/workspaces/ECONEURA-/packages/shared/src/__tests__/rate-limiter.test.ts"},{"assertionResults":[{"ancestorTitles":["RateLimiter","constructor"],"fullName":"RateLimiter constructor should create with default values","status":"passed","title":"should create with default values","duration":2.7350040000000035,"failureMessages":[],"meta":{}},{"ancestorTitles":["RateLimiter","constructor"],"fullName":"RateLimiter constructor should create with custom values","status":"passed","title":"should create with custom values","duration":0.47058900000001813,"failureMessages":[],"meta":{}},{"ancestorTitles":["RateLimiter","isAllowed"],"fullName":"RateLimiter isAllowed should allow first request","status":"passed","title":"should allow first request","duration":0.4354329999999891,"failureMessages":[],"meta":{}},{"ancestorTitles":["RateLimiter","isAllowed"],"fullName":"RateLimiter isAllowed should allow requests within limit","status":"passed","title":"should allow requests within limit","duration":0.35825999999997293,"failureMessages":[],"meta":{}},{"ancestorTitles":["RateLimiter","isAllowed"],"fullName":"RateLimiter isAllowed should block requests over limit","status":"passed","title":"should block requests over limit","duration":0.34583600000007664,"failureMessages":[],"meta":{}},{"ancestorTitles":["RateLimiter","isAllowed"],"fullName":"RateLimiter isAllowed should reset after window expires","status":"passed","title":"should reset after window expires","duration":3.719263999999953,"failureMessages":[],"meta":{}},{"ancestorTitles":["RateLimiter","isAllowed"],"fullName":"RateLimiter isAllowed should handle different keys independently","status":"passed","title":"should handle different keys independently","duration":0.36982000000000426,"failureMessages":[],"meta":{}},{"ancestorTitles":["RateLimiter","getRemainingRequests"],"fullName":"RateLimiter getRemainingRequests should return max requests for new key","status":"passed","title":"should return max requests for new key","duration":0.45367700000008426,"failureMessages":[],"meta":{}},{"ancestorTitles":["RateLimiter","getRemainingRequests"],"fullName":"RateLimiter getRemainingRequests should decrease remaining requests","status":"passed","title":"should decrease remaining requests","duration":0.3695300000000543,"failureMessages":[],"meta":{}},{"ancestorTitles":["RateLimiter","getRemainingRequests"],"fullName":"RateLimiter getRemainingRequests should not go below zero","status":"passed","title":"should not go below zero","duration":0.4998929999999291,"failureMessages":[],"meta":{}},{"ancestorTitles":["RateLimiter","getResetTime"],"fullName":"RateLimiter getResetTime should return future time for new key","status":"passed","title":"should return future time for new key","duration":0.4531560000000354,"failureMessages":[],"meta":{}},{"ancestorTitles":["RateLimiter","getResetTime"],"fullName":"RateLimiter getResetTime should return same reset time for existing key","status":"passed","title":"should return same reset time for existing key","duration":0.34219000000007327,"failureMessages":[],"meta":{}},{"ancestorTitles":["RateLimiter","clear"],"fullName":"RateLimiter clear should clear all entries","status":"passed","title":"should clear all entries","duration":0.6022349999999506,"failureMessages":[],"meta":{}},{"ancestorTitles":["createRateLimitMiddleware"],"fullName":"createRateLimitMiddleware should allow requests within limit","status":"passed","title":"should allow requests within limit","duration":4.482589999999959,"failureMessages":[],"meta":{}},{"ancestorTitles":["createRateLimitMiddleware"],"fullName":"createRateLimitMiddleware should block requests over limit","status":"passed","title":"should block requests over limit","duration":3.153116999999952,"failureMessages":[],"meta":{}},{"ancestorTitles":["createRateLimitMiddleware"],"fullName":"createRateLimitMiddleware should use custom key function","status":"passed","title":"should use custom key function","duration":0.7007290000000239,"failureMessages":[],"meta":{}},{"ancestorTitles":["createRateLimitMiddleware"],"fullName":"createRateLimitMiddleware should use anonymous key by default","status":"passed","title":"should use anonymous key by default","duration":0.5577220000000125,"failureMessages":[],"meta":{}}],"startTime":1759162278407,"endTime":1759162278428.5576,"status":"passed","message":"","name":"/workspaces/ECONEURA-/packages/shared/src/__tests__/rate-limiter.test.ts"},{"assertionResults":[{"ancestorTitles":["RateLimiter","constructor"],"fullName":"RateLimiter constructor should create with default values","status":"passed","title":"should create with default values","duration":2.6469130000000405,"failureMessages":[],"meta":{}},{"ancestorTitles":["RateLimiter","constructor"],"fullName":"RateLimiter constructor should create with custom values","status":"passed","title":"should create with custom values","duration":0.5246399999999767,"failureMessages":[],"meta":{}},{"ancestorTitles":["RateLimiter","isAllowed"],"fullName":"RateLimiter isAllowed should allow first request","status":"passed","title":"should allow first request","duration":1.1681810000000041,"failureMessages":[],"meta":{}},{"ancestorTitles":["RateLimiter","isAllowed"],"fullName":"RateLimiter isAllowed should allow requests within limit","status":"passed","title":"should allow requests within limit","duration":0.3963899999999967,"failureMessages":[],"meta":{}},{"ancestorTitles":["RateLimiter","isAllowed"],"fullName":"RateLimiter isAllowed should block requests over limit","status":"passed","title":"should block requests over limit","duration":0.3622260000000779,"failureMessages":[],"meta":{}},{"ancestorTitles":["RateLimiter","isAllowed"],"fullName":"RateLimiter isAllowed should reset after window expires","status":"passed","title":"should reset after window expires","duration":5.585059000000001,"failureMessages":[],"meta":{}},{"ancestorTitles":["RateLimiter","isAllowed"],"fullName":"RateLimiter isAllowed should handle different keys independently","status":"passed","title":"should handle different keys independently","duration":0.42591600000002927,"failureMessages":[],"meta":{}},{"ancestorTitles":["RateLimiter","getRemainingRequests"],"fullName":"RateLimiter getRemainingRequests should return max requests for new key","status":"passed","title":"should return max requests for new key","duration":0.40620899999998983,"failureMessages":[],"meta":{}},{"ancestorTitles":["RateLimiter","getRemainingRequests"],"fullName":"RateLimiter getRemainingRequests should decrease remaining requests","status":"passed","title":"should decrease remaining requests","duration":0.4198939999999993,"failureMessages":[],"meta":{}},{"ancestorTitles":["RateLimiter","getRemainingRequests"],"fullName":"RateLimiter getRemainingRequests should not go below zero","status":"passed","title":"should not go below zero","duration":0.38051999999993313,"failureMessages":[],"meta":{}},{"ancestorTitles":["RateLimiter","getResetTime"],"fullName":"RateLimiter getResetTime should return future time for new key","status":"passed","title":"should return future time for new key","duration":0.4117390000000114,"failureMessages":[],"meta":{}},{"ancestorTitles":["RateLimiter","getResetTime"],"fullName":"RateLimiter getResetTime should return same reset time for existing key","status":"passed","title":"should return same reset time for existing key","duration":0.3263689999999997,"failureMessages":[],"meta":{}},{"ancestorTitles":["RateLimiter","clear"],"fullName":"RateLimiter clear should clear all entries","status":"passed","title":"should clear all entries","duration":0.5706160000000864,"failureMessages":[],"meta":{}},{"ancestorTitles":["createRateLimitMiddleware"],"fullName":"createRateLimitMiddleware should allow requests within limit","status":"passed","title":"should allow requests within limit","duration":4.694897000000083,"failureMessages":[],"meta":{}},{"ancestorTitles":["createRateLimitMiddleware"],"fullName":"createRateLimitMiddleware should block requests over limit","status":"passed","title":"should block requests over limit","duration":3.2699060000001055,"failureMessages":[],"meta":{}},{"ancestorTitles":["createRateLimitMiddleware"],"fullName":"createRateLimitMiddleware should use custom key function","status":"passed","title":"should use custom key function","duration":0.666123999999968,"failureMessages":[],"meta":{}},{"ancestorTitles":["createRateLimitMiddleware"],"fullName":"createRateLimitMiddleware should use anonymous key by default","status":"passed","title":"should use anonymous key by default","duration":0.4259549999999308,"failureMessages":[],"meta":{}}],"startTime":1759162278428,"endTime":1759162278452.426,"status":"passed","message":"","name":"/workspaces/ECONEURA-/packages/shared/src/__tests__/rate-limiter.test.ts"},{"assertionResults":[{"ancestorTitles":["Retry Module","withRetry"],"fullName":"Retry Module withRetry should return result on first attempt","status":"passed","title":"should return result on first attempt","duration":6.588750000000118,"failureMessages":[],"meta":{}},{"ancestorTitles":["Retry Module","withRetry"],"fullName":"Retry Module withRetry should retry on failure and succeed","status":"passed","title":"should retry on failure and succeed","duration":3.791729999999916,"failureMessages":[],"meta":{}},{"ancestorTitles":["Retry Module","withRetry"],"fullName":"Retry Module withRetry should fail after max attempts","status":"passed","title":"should fail after max attempts","duration":6.32831699999997,"failureMessages":[],"meta":{}},{"ancestorTitles":["Retry Module","withRetry"],"fullName":"Retry Module withRetry should use custom retry condition","status":"passed","title":"should use custom retry condition","duration":8.63377800000012,"failureMessages":[],"meta":{}},{"ancestorTitles":["Retry Module","withRetry"],"fullName":"Retry Module withRetry should not retry when condition returns false","status":"passed","title":"should not retry when condition returns false","duration":0.9815730000000258,"failureMessages":[],"meta":{}},{"ancestorTitles":["Retry Module","defaultRetryOptions"],"fullName":"Retry Module defaultRetryOptions should have sensible defaults","status":"passed","title":"should have sensible defaults","duration":2.286542999999938,"failureMessages":[],"meta":{}},{"ancestorTitles":["Retry Module","defaultRetryOptions"],"fullName":"Retry Module defaultRetryOptions should retry on network errors","status":"passed","title":"should retry on network errors","duration":0.5902629999998226,"failureMessages":[],"meta":{}}],"startTime":1759162279350,"endTime":1759162279381.5903,"status":"passed","message":"","name":"/workspaces/ECONEURA-/packages/shared/src/__tests__/retry.test.ts"},{"assertionResults":[{"ancestorTitles":["Retry Module","withRetry"],"fullName":"Retry Module withRetry should return result on first attempt","status":"passed","title":"should return result on first attempt","duration":5.7028589999999895,"failureMessages":[],"meta":{}},{"ancestorTitles":["Retry Module","withRetry"],"fullName":"Retry Module withRetry should retry on failure and succeed","status":"passed","title":"should retry on failure and succeed","duration":2.325271999999927,"failureMessages":[],"meta":{}},{"ancestorTitles":["Retry Module","withRetry"],"fullName":"Retry Module withRetry should fail after max attempts","status":"passed","title":"should fail after max attempts","duration":3.7866000000000213,"failureMessages":[],"meta":{}},{"ancestorTitles":["Retry Module","withRetry"],"fullName":"Retry Module withRetry should use custom retry condition","status":"passed","title":"should use custom retry condition","duration":6.097415000000069,"failureMessages":[],"meta":{}},{"ancestorTitles":["Retry Module","withRetry"],"fullName":"Retry Module withRetry should not retry when condition returns false","status":"passed","title":"should not retry when condition returns false","duration":0.718311999999969,"failureMessages":[],"meta":{}},{"ancestorTitles":["Retry Module","defaultRetryOptions"],"fullName":"Retry Module defaultRetryOptions should have sensible defaults","status":"passed","title":"should have sensible defaults","duration":0.40833200000008674,"failureMessages":[],"meta":{}},{"ancestorTitles":["Retry Module","defaultRetryOptions"],"fullName":"Retry Module defaultRetryOptions should retry on network errors","status":"passed","title":"should retry on network errors","duration":0.5292879999999514,"failureMessages":[],"meta":{}}],"startTime":1759162280102,"endTime":1759162280122.5293,"status":"passed","message":"","name":"/workspaces/ECONEURA-/packages/shared/src/__tests__/retry.test.ts"},{"assertionResults":[{"ancestorTitles":["Retry Module","withRetry"],"fullName":"Retry Module withRetry should return result on first attempt","status":"passed","title":"should return result on first attempt","duration":4.4680929999999535,"failureMessages":[],"meta":{}},{"ancestorTitles":["Retry Module","withRetry"],"fullName":"Retry Module withRetry should retry on failure and succeed","status":"passed","title":"should retry on failure and succeed","duration":2.633418000000006,"failureMessages":[],"meta":{}},{"ancestorTitles":["Retry Module","withRetry"],"fullName":"Retry Module withRetry should fail after max attempts","status":"passed","title":"should fail after max attempts","duration":2.8484490000000164,"failureMessages":[],"meta":{}},{"ancestorTitles":["Retry Module","withRetry"],"fullName":"Retry Module withRetry should use custom retry condition","status":"passed","title":"should use custom retry condition","duration":5.6308349999999905,"failureMessages":[],"meta":{}},{"ancestorTitles":["Retry Module","withRetry"],"fullName":"Retry Module withRetry should not retry when condition returns false","status":"passed","title":"should not retry when condition returns false","duration":0.6100589999999784,"failureMessages":[],"meta":{}},{"ancestorTitles":["Retry Module","defaultRetryOptions"],"fullName":"Retry Module defaultRetryOptions should have sensible defaults","status":"passed","title":"should have sensible defaults","duration":0.37333699999999226,"failureMessages":[],"meta":{}},{"ancestorTitles":["Retry Module","defaultRetryOptions"],"fullName":"Retry Module defaultRetryOptions should retry on network errors","status":"passed","title":"should retry on network errors","duration":0.425534999999968,"failureMessages":[],"meta":{}}],"startTime":1759162280346,"endTime":1759162280363.4255,"status":"passed","message":"","name":"/workspaces/ECONEURA-/packages/shared/src/__tests__/retry.test.ts"},{"assertionResults":[{"ancestorTitles":["Validation Module","validateEmail"],"fullName":"Validation Module validateEmail should validate correct email addresses","status":"passed","title":"should validate correct email addresses","duration":5.831167999999934,"failureMessages":[],"meta":{}},{"ancestorTitles":["Validation Module","validateEmail"],"fullName":"Validation Module validateEmail should reject invalid email addresses","status":"passed","title":"should reject invalid email addresses","duration":1.4739219999999023,"failureMessages":[],"meta":{}},{"ancestorTitles":["Validation Module","validateUUID"],"fullName":"Validation Module validateUUID should validate correct UUID v4 format","status":"passed","title":"should validate correct UUID v4 format","duration":1.3447419999999966,"failureMessages":[],"meta":{}},{"ancestorTitles":["Validation Module","validateUUID"],"fullName":"Validation Module validateUUID should reject invalid UUID formats","status":"passed","title":"should reject invalid UUID formats","duration":0.8502670000000307,"failureMessages":[],"meta":{}},{"ancestorTitles":["Validation Module","validateData"],"fullName":"Validation Module validateData should validate data against Zod schema successfully","status":"passed","title":"should validate data against Zod schema successfully","duration":3.8940580000000864,"failureMessages":[],"meta":{}},{"ancestorTitles":["Validation Module","validateData"],"fullName":"Validation Module validateData should return errors for invalid data","status":"passed","title":"should return errors for invalid data","duration":1.084295000000111,"failureMessages":[],"meta":{}},{"ancestorTitles":["Validation Module","validateData"],"fullName":"Validation Module validateData should handle simple schemas","status":"passed","title":"should handle simple schemas","duration":0.3734070000000429,"failureMessages":[],"meta":{}},{"ancestorTitles":["Validation Module","validateData"],"fullName":"Validation Module validateData should validate with custom error messages","status":"passed","title":"should validate with custom error messages","duration":1.0574139999998806,"failureMessages":[],"meta":{}}],"startTime":1759162277636,"endTime":1759162277653.0574,"status":"passed","message":"","name":"/workspaces/ECONEURA-/packages/shared/src/__tests__/validation.test.ts"},{"assertionResults":[{"ancestorTitles":["Validation Module","validateEmail"],"fullName":"Validation Module validateEmail should validate correct email addresses","status":"passed","title":"should validate correct email addresses","duration":6.95072899999991,"failureMessages":[],"meta":{}},{"ancestorTitles":["Validation Module","validateEmail"],"fullName":"Validation Module validateEmail should reject invalid email addresses","status":"passed","title":"should reject invalid email addresses","duration":1.1593350000000555,"failureMessages":[],"meta":{}},{"ancestorTitles":["Validation Module","validateUUID"],"fullName":"Validation Module validateUUID should validate correct UUID v4 format","status":"passed","title":"should validate correct UUID v4 format","duration":0.5250109999999495,"failureMessages":[],"meta":{}},{"ancestorTitles":["Validation Module","validateUUID"],"fullName":"Validation Module validateUUID should reject invalid UUID formats","status":"passed","title":"should reject invalid UUID formats","duration":0.813980000000015,"failureMessages":[],"meta":{}},{"ancestorTitles":["Validation Module","validateData"],"fullName":"Validation Module validateData should validate data against Zod schema successfully","status":"passed","title":"should validate data against Zod schema successfully","duration":3.6587019999999484,"failureMessages":[],"meta":{}},{"ancestorTitles":["Validation Module","validateData"],"fullName":"Validation Module validateData should return errors for invalid data","status":"passed","title":"should return errors for invalid data","duration":1.7159550000000081,"failureMessages":[],"meta":{}},{"ancestorTitles":["Validation Module","validateData"],"fullName":"Validation Module validateData should handle simple schemas","status":"passed","title":"should handle simple schemas","duration":0.6977430000000595,"failureMessages":[],"meta":{}},{"ancestorTitles":["Validation Module","validateData"],"fullName":"Validation Module validateData should validate with custom error messages","status":"passed","title":"should validate with custom error messages","duration":1.6920399999999063,"failureMessages":[],"meta":{}}],"startTime":1759162279747,"endTime":1759162279764.6921,"status":"passed","message":"","name":"/workspaces/ECONEURA-/packages/shared/src/__tests__/validation.test.ts"},{"assertionResults":[{"ancestorTitles":["Validation Module","validateEmail"],"fullName":"Validation Module validateEmail should validate correct email addresses","status":"passed","title":"should validate correct email addresses","duration":5.618119999999976,"failureMessages":[],"meta":{}},{"ancestorTitles":["Validation Module","validateEmail"],"fullName":"Validation Module validateEmail should reject invalid email addresses","status":"passed","title":"should reject invalid email addresses","duration":1.0887329999999338,"failureMessages":[],"meta":{}},{"ancestorTitles":["Validation Module","validateUUID"],"fullName":"Validation Module validateUUID should validate correct UUID v4 format","status":"passed","title":"should validate correct UUID v4 format","duration":0.48493600000006154,"failureMessages":[],"meta":{}},{"ancestorTitles":["Validation Module","validateUUID"],"fullName":"Validation Module validateUUID should reject invalid UUID formats","status":"passed","title":"should reject invalid UUID formats","duration":0.7495490000000018,"failureMessages":[],"meta":{}},{"ancestorTitles":["Validation Module","validateData"],"fullName":"Validation Module validateData should validate data against Zod schema successfully","status":"passed","title":"should validate data against Zod schema successfully","duration":4.3170109999999795,"failureMessages":[],"meta":{}},{"ancestorTitles":["Validation Module","validateData"],"fullName":"Validation Module validateData should return errors for invalid data","status":"passed","title":"should return errors for invalid data","duration":1.5599230000000261,"failureMessages":[],"meta":{}},{"ancestorTitles":["Validation Module","validateData"],"fullName":"Validation Module validateData should handle simple schemas","status":"passed","title":"should handle simple schemas","duration":0.6602920000000267,"failureMessages":[],"meta":{}},{"ancestorTitles":["Validation Module","validateData"],"fullName":"Validation Module validateData should validate with custom error messages","status":"passed","title":"should validate with custom error messages","duration":1.5430509999999913,"failureMessages":[],"meta":{}}],"startTime":1759162279774,"endTime":1759162279791.543,"status":"passed","message":"","name":"/workspaces/ECONEURA-/packages/shared/src/__tests__/validation.test.ts"}]}