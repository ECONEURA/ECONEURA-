name: Trivy scan (repo)

on:
  push:
    branches:
      - feat/coverage-aggregator
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  trivy:
    name: Run Trivy filesystem scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Trivy filesystem scan (produce JSON and SARIF)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          format: json,sarif
          output: trivy-results.json,trivy-results.sarif
          severity: CRITICAL,HIGH,MEDIUM,LOW

      - name: Upload SARIF to Code Scanning (optional)
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif

      - name: Upload artifact (trivy-results.*)
        uses: actions/upload-artifact@v4
        with:
          name: trivy-results
          path: |
            trivy-results.json
            trivy-results.sarif

      - name: Count vulnerabilities
        id: scan
        run: |
          echo "Installing jq..."
          sudo apt-get update && sudo apt-get install -y jq || true
          if [ -f trivy-results.json ]; then
            # Sum lengths of Vulnerabilities arrays across Results
            count=$(jq '[.Results[]?.Vulnerabilities[]?] | length' trivy-results.json)
            echo "vuln_count=$count" >> $GITHUB_OUTPUT
            echo "Found $count vulnerabilities"
          else
            echo "vuln_count=0" >> $GITHUB_OUTPUT
            echo "No trivy-results.json found"
          fi

      - name: Create remediation PR (remove backups) if vulns found
        if: steps.scan.outputs.vuln_count != '0'
        env:
          GIT_COMMITTER_NAME: github-actions[bot]
          GIT_COMMITTER_EMAIL: github-actions[bot]@users.noreply.github.com
        run: |
          git config user.name "$GIT_COMMITTER_NAME"
          git config user.email "$GIT_COMMITTER_EMAIL"
          branch="fix/trivy-remove-backups-$(date +%s)"
          git checkout -b "$branch"
          # Remove tracked backups dir if present
          git rm -r --ignore-unmatch backups || true
          # Ensure backups/ is in .gitignore
          if ! grep -q "^backups/" .gitignore 2>/dev/null; then
            echo "backups/" >> .gitignore
            git add .gitignore
          fi
          git add -A
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "chore(security): remove tracked backups detected by Trivy"
          fi

      - name: Create Pull Request
        if: steps.scan.outputs.vuln_count != '0'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore(security): remove tracked backups detected by Trivy"
          branch: "fix/trivy-remove-backups"
          title: "chore(security): remove tracked backups detected by Trivy"
          body: |
            Automated remediation: Trivy detected vulnerabilities originating from tracked backups.
            This PR removes the `backups/` directory from the repository and updates `.gitignore`.
          base: main
