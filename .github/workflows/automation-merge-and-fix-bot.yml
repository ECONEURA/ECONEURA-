name: "Automation: Merge & Fix Bot"

on:
  push:
    branches:
      - 'work/**'

permissions:
  contents: write
  pull-requests: write

jobs:
  auto-fix-and-pr:
    runs-on: ubuntu-latest
    env:
      AUTH_TOKEN: ${{ secrets.AUTOMATION_PAT || secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '8.15.5'

      - name: Install (capture logs)
        run: |
          set -euo pipefail
          pnpm install --frozen-lockfile 2>&1 | tee pnpm-install.log || true

      - name: Run lint and tests (fast) and capture logs
        run: |
          set -euo pipefail
          echo "Running workspace lint..."
          pnpm -w run lint 2>&1 | tee eslint.log || true
          echo "Running workspace typecheck..."
          pnpm -w run typecheck 2>&1 | tee tsc.log || true
          echo "Running fast tests..."
          pnpm -w run test:fast 2>&1 | tee vitest.log || true

      - name: Run advanced auto-fix script
        run: |
          chmod +x ./scripts/auto_fix_advanced.sh || true
          ./scripts/auto_fix_advanced.sh || true

      - name: Commit and push fixes (if any)
        env:
          GIT_AUTHOR_NAME: automation-bot
          GIT_AUTHOR_EMAIL: automation@example.com
        run: |
          git config user.name "$GIT_AUTHOR_NAME"
          git config user.email "$GIT_AUTHOR_EMAIL"
          git add -A || true
          if ! git diff --staged --quiet; then
            git commit -m "chore(ci): apply auto-fixes" || true
            if [ -n "${AUTH_TOKEN:-}" ]; then
              git remote set-url origin https://x-access-token:${AUTH_TOKEN}@github.com/${{ github.repository }}
            fi
            git push origin HEAD:$(echo ${GITHUB_REF#refs/heads/})
          else
            echo "No fixes to commit"
          fi

      - name: Create or update PR (if missing)
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.AUTOMATION_PAT || secrets.GITHUB_TOKEN }}
          script: |
            function ascii(str){ return str.replace(/[–—]/g,'-').replace(/[^\x00-\x7F]/g,''); }
            const branch = process.env.GITHUB_REF.replace('refs/heads/', '');
            const base = 'main';
            const prs = await github.rest.pulls.list({ owner: context.repo.owner, repo: context.repo.repo, head: `${context.repo.owner}:${branch}`, state: 'open' });
            if (prs.data && prs.data.length > 0) {
              console.log('PR already exists for', branch);
              return JSON.stringify({ exists: true, url: prs.data[0].html_url });
            }
            const title = ascii(`Automated PR: ${branch} -> ${base}`);
            const body = ascii(`This PR was automatically created for branch **${branch}** after running auto-fix. Please review and run CI.`);
            const pr = await github.rest.pulls.create({ owner: context.repo.owner, repo: context.repo.repo, head: branch, base, title, body });
            console.log('Created PR:', pr.data.html_url);
            return JSON.stringify({ url: pr.data.html_url });

      - name: Upload diagnostics
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: automation-diagnostics
          path: |
            pnpm-install.log
            eslint.log
            tsc.log
            vitest.log

      - name: Comment diagnostics on PR (truncated)
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.AUTOMATION_PAT || secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            function safeExcerpt(raw) {
              const excerpt = raw.slice(0, 8000);
              return excerpt.replace(/```/g, '``\u200B`');
            }
            const branch = process.env.GITHUB_REF.replace('refs/heads/', '');
            const prs = await github.rest.pulls.list({ owner: context.repo.owner, repo: context.repo.repo, head: `${context.repo.owner}:${branch}`, state: 'open' });
            if (!(prs.data && prs.data.length > 0)) {
              console.log('No open PR for', branch, '-- skipping PR comment');
              return;
            }
            const prNumber = prs.data[0].number;
            const files = ['pnpm-install.log','eslint.log','tsc.log','vitest.log'];
            const parts = [];
            for (const f of files) {
              try {
                const raw = fs.readFileSync(f, 'utf8');
                const block = '### ' + f + '\n\n' + '```\n' + safeExcerpt(raw) + '\n```';
                parts.push(JSON.parse(JSON.stringify(block)));
              } catch (e) {
                parts.push('### ' + f + '\n\n_not found or not generated_');
              }
            }
            const header = 'Automated diagnostics for branch **' + branch + '**. Attached logs are available as workflow artifacts (automation-diagnostics).\n\n';
            const body = header + parts.join('\n\n');
            await github.rest.issues.createComment({ owner: context.repo.owner, repo: context.repo.repo, issue_number: prNumber, body: body });
