name: ci-debug
on:
  push:
    branches:
      - main
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
permissions:
  contents: read
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true
env:
  DEPLOY_ENABLED: "false"
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Lint Python
        run: |
          python -m pip install flake8
          flake8 apps/api_py/server.py --max-line-length=120 --ignore=E501,W503 || true
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8.15.5
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Run tests
        run: pnpm test
      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          fail_ci_if_error: false
  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  docker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: econeura:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Test Docker image
        run: |
          docker run --rm econeura:test python --version || echo "No Python in container"
  deploy-preview:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8.15.5
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Validate deployment configuration
        run: |
          echo "üîç Validating deployment configuration..."
          # Check if Azure deployment files exist
          if [ -f "deploy_azure.sh" ]; then
            echo "‚úÖ Azure deployment script found"
          else
            echo "‚ùå Azure deployment script missing"
            exit 1
          fi
          
          # Check if docker-compose exists
          if [ -f "docker-compose.dev.yml" ]; then
            echo "‚úÖ Docker compose config found"
          else
            echo "‚ùå Docker compose config missing"
            exit 1
          fi
          
          # Validate package.json scripts
          if jq -e '.scripts.build' package.json > /dev/null; then
            echo "‚úÖ Build script configured"
          else
            echo "‚ö†Ô∏è  No build script in package.json"
          fi
          
          echo "üéØ Deployment preview: Configuration validated"
  smoke_python_debug:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install system dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y jq
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Ensure routing (10 NEURA)
        run: |
          python - <<'PY'
          import json, os
          p="packages/config/agent-routing.json"
          os.makedirs(os.path.dirname(p), exist_ok=True)
          want=[{"id":f"neura-{i}","url":f"http://localhost:4310/hook/neura-{i}","auth":"header","keyEnv":"MAKE_TOKEN"} for i in range(1,11)]
          try:
            d=json.load(open(p)); ok=isinstance(d,list) and len(d)==10 and sorted(x["id"] for x in d)==[f"neura-{i}" for i in range(1,11)] and all(set(r)=={"id","url","auth","keyEnv"} for r in d)
          except: ok=False
          open(p,"w").write(json.dumps(d if ok else want,indent=2))
          PY
      - name: DEBUG smoke (8080, 1 NEURA, logs completos)
        shell: bash
        run: |
          set -Eeuo pipefail
          export HOST=127.0.0.1 PORT=8080
          echo "# start server" | tee server.log
          python -u apps/api_py/server.py "$PORT" 2>&1 | tee -a server.log & echo $! > .api.pid
          trap 'kill $(cat .api.pid) 2>/dev/null || true' EXIT
          echo "# health probe" | tee curl_health.log
          ok=0
          for i in {1..30}; do
            echo "## attempt $i" | tee -a curl_health.log
            if curl -v --show-error --fail "http://$HOST:$PORT/api/health" | tee health.json; then ok=1; break; fi
            sleep 1
          done
          [ "$ok" = "1" ] || { echo "ERROR: health no respondi√≥" | tee -a curl_health.log; exit 1; }
          echo "# invoke neura-1 (verbose)" | tee curl_invoke1.log
          START_TIME=$(date +%s%3N)
          curl -v --show-error --fail -XPOST "http://$HOST:$PORT/api/invoke/neura-1" \
            -H "Authorization: Bearer X" -H "X-Route: azure" -H "X-Correlation-Id: cid-1" \
            -H "Content-Type: application/json" -d '{"input":""}' | tee invoke1.json
          END_TIME=$(date +%s%3N)
          RESPONSE_TIME=$((END_TIME - START_TIME))
          echo "Response time: ${RESPONSE_TIME}ms" | tee -a curl_invoke1.log
          {
            echo "## ECONEURA DEBUG summary"
            echo "- ‚úÖ Health check: PASSED"
            echo "- ‚úÖ Neura invoke: PASSED"
            echo "- ‚è±Ô∏è Response time: ${RESPONSE_TIME}ms"
            echo "- üìÑ Evidence generated: $(wc -l < WF_EVIDENCE.csv) lines"
            echo "- Puerto usado: $PORT"
            echo "- Health body:"; sed 's/^/    /' health.json || true
            echo "- Invoke body:"; sed 's/^/    /' invoke1.json || true
          } >> "$GITHUB_STEP_SUMMARY"
          # Validate evidence file
          if [ -f WF_EVIDENCE.csv ] && [ "$(wc -l < WF_EVIDENCE.csv)" -gt 1 ]; then
            echo "‚úÖ WF_EVIDENCE.csv generated successfully"
          else
            echo "‚ùå WF_EVIDENCE.csv missing or empty"
            exit 1
          fi
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: debug-logs
          path: |
            server.log
            curl_health.log
            curl_invoke1.log
            health.json
            invoke1.json
          if-no-files-found: warn
          retention-days: 7
