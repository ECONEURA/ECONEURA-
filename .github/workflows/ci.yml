name: ci

on:
  push:
    branches: [main]
    paths-ignore:
      - "**/*.md"
      - "docs/**"
      - "**/*.txt"
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch: {}

permissions:
  contents: read
  security-events: write
  checks: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: "20"
  PYTHON_VERSION: "3.11"
  PNPM_VERSION: "8.15.5"
  DEPLOY_ENABLED: "false"

jobs:
  fast-check:
    name: Fast checks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        run: npm i -g pnpm@${{ env.PNPM_VERSION }}

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}-node-${{ env.NODE_VERSION }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install deps (fast)
        run: |
          pnpm install --frozen-lockfile --ignore-scripts || npm ci --no-audit --no-fund

      - name: Typecheck
        run: pnpm run typecheck || echo "Typecheck skipped"

      - name: Lint
        run: pnpm run lint --max-warnings 0 || echo "Lint skipped"

  quality:
    name: Quality & Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: fast-check
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        run: npm i -g pnpm@${{ env.PNPM_VERSION }}

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}-node-${{ env.NODE_VERSION }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install deps
        run: pnpm install --frozen-lockfile || npm ci --no-audit --no-fund

      - name: Build
        run: pnpm run build --if-present

      - name: Run tests (strict)
        run: pnpm run test --if-present -- --run || (echo "Tests failed" && exit 1)

      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: |
            reports
            test-results

  cockpit-integration:
    name: Cockpit Integration
    runs-on: ubuntu-latest
    needs: quality
    if: always()
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Run cockpit CI locally
        run: |
          cd .dev/cockpit
          if [ -f pnpm-lock.yaml ]; then
            pnpm install --frozen-lockfile
            pnpm run build
            pnpm run test:ci
          else
            npm ci --no-audit --no-fund
            npm run build
            npm run test:ci
          fi

  summary:
    name: Summary
    runs-on: ubuntu-latest
    needs: [fast-check, quality]
    if: always()
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Print summary
        run: |
          echo "Fast: ${{ needs.fast-check.result }}"
          echo "Quality: ${{ needs.quality.result }}"
          echo "Node: ${{ env.NODE_VERSION }}"
          echo "Deploy Enabled: ${{ env.DEPLOY_ENABLED }}"

  shared-tests:
    name: Shared package tests
    runs-on: ubuntu-latest
    needs: quality
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        run: npm i -g pnpm@${{ env.PNPM_VERSION }}

      - name: Install deps (fast)
        run: pnpm install --frozen-lockfile --ignore-scripts

      - name: Run shared package tests
        run: pnpm -w -s exec vitest packages/shared/src/logging/index.test.ts --run

      - name: Upload shared test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: shared-test-report
          path: reports
