Resumen de estado de cobertura (generado automáticamente)

Totales actuales (agregados):
- Statements: 91.64%
- Functions: 85.59%
- Totales brutos: ts=562, tc=515, fs=111, fc=95
- Targets analizados: packages/shared

Problemas detectados prioritarios (acción recomendada)
1) Tests fallidos en `apps/web` (bloquea generación de cobertura completa)
   - Error observado: Failed to resolve import "react/jsx-dev-runtime" from "src/EconeuraCockpit.e2e.test.tsx".
   - Causa probable: dependencia de React no resuelta en `apps/web` o configuración JSX/transform (Vitest/Vite). También puede ser un test E2E que importó artefactos compilados.
   - Pasos recomendados para reparación rápida:
     - Ejecutar desde la raíz (pwsh):
```pwsh
# instalar dependencias en monorepo (si hace falta)
pnpm install
# instalar react/react-dom en la app si faltan
pnpm --filter ./apps/web add react react-dom --workspace-root
# o, para pruebas, saltarse el test E2E temporalmente (editar el archivo para usar .skip)
# abrir src/EconeuraCockpit.e2e.test.tsx y cambiar describe -> describe.skip o renombrar a .skip.test.tsx
```
   - Verificar también `vitest.config.ts`/`vite` para alias/resolver y que `jsx` esté bien configurado en `tsconfig.json` (p.ej. `"jsx": "react-jsx"` para React 17+).

2) Subir cobertura en `packages/shared` (es el target señalado por el diagnóstico)
   - Archivos con /indicios/ de baja cobertura (orden sugerido para atención):
     - `src/middleware.ts` (55 lines, observado covered=37)
    - `src/retry.ts` (52 lines, covered=40)
    - `src/validation.ts` (24 lines, covered=20)
    - `src/logging/index.ts` (107 lines, covered=96) — buena prioridad por volumen de código
   - Acciones concretas:
     - Añadir tests unitarios que cubran rutas de error y casos no felices (p.ej. parámetros inválidos, reintentos fallidos, etc.).
     - Para `middleware`, agregar tests que simulen peticiones/response con y sin errores.
     - Para `retry`, tests de comportamiento con timers; usar `vi.useFakeTimers()` cuando proceda.

3) Habilitar y medir branch coverage (si lo desea)
   - Actualmente el reporte de branch apareció como 0% en el primer run; verificar que Vitest/coverage provider esté configurado para instrumentar branches. En `vitest` configurar provider `c8` o asegurarse de que `v8` capture branches según versiones.

4) Integración CI (siguiente paso)
   - Añadir job en GitHub Actions que ejecute en orden:
     1. `pnpm install`
     2. `pnpm check:forbidden`
     3. `pnpm coverage:enforce`
   - Subir los archivos `.artifacts/STATUS_COV_DIFF*.txt` como artefactos del job en caso de fallo para diagnóstico rápido.

Tareas que puedo hacer ahora (elige una)
- Ejecutar `pnpm coverage:enforce` aquí para regenerar diagnóstico y devolver archivos actualizados (nota: puede ejecutar testes y tardar). 
- Aplicar una corrección rápida en `apps/web` (añadir `react` como dependencia en la app) y reintentar cobertura.
- Generar un esqueleto de tests unitarios en `packages/shared` para `middleware` y `retry` (archivos de prueba con casos básicos).

Si quieres que proceda con alguna de las tareas anteriores, dime cuál y la ejecuto (prefiero empezar por arreglar `apps/web` para que los runs de coverage terminen y den datos completos).