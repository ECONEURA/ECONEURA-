#!/bin/bash

# Reconstrucci√≥n 100% Automatizada del Dev Container ECONEURA
# Versi√≥n: 2.0 - 7 Octubre 2025 (POST-AUTOCR√çTICA)
# Autor: GitHub Copilot - Versi√≥n corregida

set -e  # Salir en caso de error

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Funci√≥n para imprimir mensajes coloreados
print_header() {
    echo -e "${BLUE}================================================================${NC}"
    echo -e "${BLUE}$1${NC}"
    echo -e "${BLUE}================================================================${NC}"
}

print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_step() {
    echo -e "${CYAN}[STEP]${NC} $1"
}

# Funci√≥n para verificar si estamos en un dev container
check_devcontainer_environment() {
    print_step "Verificando entorno del dev container..."

    if [ -f ".devcontainer/devcontainer.json" ] && [ -f ".devcontainer/Dockerfile" ]; then
        print_success "Archivos de configuraci√≥n encontrados"
        return 0
    else
        print_error "Archivos de dev container no encontrados"
        return 1
    fi
}

# Funci√≥n para verificar herramientas disponibles
check_available_tools() {
    print_step "Verificando herramientas disponibles..."

    local tools_available=()

    # Verificar Docker
    if command -v docker &> /dev/null; then
        tools_available+=("docker")
        print_success "Docker: ‚úÖ Disponible"
    else
        print_warning "Docker: ‚ùå NO disponible"
    fi

    # Verificar Docker Compose
    if command -v docker-compose &> /dev/null; then
        tools_available+=("docker-compose")
        print_success "Docker Compose: ‚úÖ Disponible"
    else
        print_warning "Docker Compose: ‚ùå NO disponible"
    fi

    # Verificar Dev Containers CLI
    if command -v devcontainer &> /dev/null; then
        tools_available+=("devcontainer-cli")
        print_success "Dev Containers CLI: ‚úÖ Disponible"
    else
        print_warning "Dev Containers CLI: ‚ùå NO disponible"
    fi

    # Verificar VS Code CLI
    if command -v code &> /dev/null; then
        tools_available+=("vscode-cli")
        print_success "VS Code CLI: ‚úÖ Disponible"
    else
        print_warning "VS Code CLI: ‚ùå NO disponible"
    fi

    echo "${tools_available[@]}"
}

# M√©todo 1: Reconstrucci√≥n usando Dev Containers CLI
rebuild_with_devcontainers_cli() {
    print_step "M√âTODO 1: Intentando reconstrucci√≥n con Dev Containers CLI..."

    if ! command -v devcontainer &> /dev/null; then
        print_warning "Dev Containers CLI no disponible, saltando..."
        return 1
    fi

    print_status "Ejecutando: devcontainer rebuild"
    if devcontainer rebuild --workspace-folder . 2>&1; then
        print_success "Reconstrucci√≥n con Dev Containers CLI exitosa"
        return 0
    else
        print_warning "Dev Containers CLI fall√≥, intentando siguiente m√©todo..."
        return 1
    fi
}

# M√©todo 2: Reconstrucci√≥n usando VS Code CLI
rebuild_with_vscode_cli() {
    print_step "M√âTODO 2: Intentando reconstrucci√≥n con VS Code CLI..."

    if ! command -v code &> /dev/null; then
        print_warning "VS Code CLI no disponible, saltando..."
        return 1
    fi

    print_status "Ejecutando: code --command dev-containers.rebuildContainer"
    if code --command "dev-containers.rebuildContainer" 2>&1; then
        print_success "Reconstrucci√≥n con VS Code CLI exitosa"
        return 0
    else
        print_warning "VS Code CLI fall√≥, intentando siguiente m√©todo..."
        return 1
    fi
}

# M√©todo 3: Reconstrucci√≥n usando Docker Build directo
rebuild_with_docker_build() {
    print_step "M√âTODO 3: Intentando reconstrucci√≥n con Docker Build directo..."

    if ! command -v docker &> /dev/null; then
        print_warning "Docker no disponible, saltando..."
        return 1
    fi

    # Leer configuraci√≥n del devcontainer.json
    local dockerfile_path=".devcontainer/Dockerfile"
    local image_name="econeura-devcontainer-$(date +%s)"

    if [ ! -f "$dockerfile_path" ]; then
        print_error "Dockerfile no encontrado: $dockerfile_path"
        return 1
    fi

    print_status "Construyendo imagen Docker: $image_name"
    if docker build -f "$dockerfile_path" -t "$image_name" . 2>&1; then
        print_success "Imagen Docker construida exitosamente"

        # Aqu√≠ podr√≠amos intentar ejecutar el contenedor, pero eso es complejo
        # Por ahora, solo verificamos que la construcci√≥n funciona
        print_warning "Docker Build completado, pero reconstrucci√≥n del dev container requiere VS Code"
        return 1
    else
        print_warning "Docker Build fall√≥, intentando siguiente m√©todo..."
        return 1
    fi
}

# M√©todo 4: Instrucciones manuales con verificaci√≥n autom√°tica
rebuild_manual_with_verification() {
    print_step "M√âTODO 4: Instrucciones manuales con verificaci√≥n autom√°tica"

    print_warning "NING√öN M√âTODO AUTOMATIZADO FUNCION√ì"
    echo ""
    print_status "PROCESO MANUAL REQUERIDO:"
    echo ""
    echo "1Ô∏è‚É£  Abrir VS Code Command Palette:"
    echo "    Presiona: Ctrl+Shift+P (o Cmd+Shift+P en Mac)"
    echo ""
    echo "2Ô∏è‚É£  Buscar y ejecutar:"
    echo "    'Dev Containers: Rebuild Container'"
    echo ""
    echo "3Ô∏è‚É£  Esperar la reconstrucci√≥n completa"
    echo ""
    print_status "MONITOREO AUTOM√ÅTICO:"
    echo "‚Ä¢ Este script esperar√° y verificar√° autom√°ticamente"
    echo "‚Ä¢ Presiona Enter cuando la reconstrucci√≥n termine en VS Code"
    echo ""

    # Esperar confirmaci√≥n del usuario
    read -p "Presiona Enter cuando hayas completado la reconstrucci√≥n manual..."

    print_status "Verificando reconstrucci√≥n manual..."
    return 0  # Asumimos que el usuario complet√≥ correctamente
}

# Funci√≥n para verificar post-reconstrucci√≥n
verify_post_rebuild() {
    print_step "Verificando post-reconstrucci√≥n..."

    local all_good=true

    # Verificar Docker
    if docker --version &>/dev/null; then
        print_success "Docker: ‚úÖ Disponible"
    else
        print_error "Docker: ‚ùå NO disponible"
        all_good=false
    fi

    # Verificar Docker Compose
    if docker-compose --version &>/dev/null; then
        print_success "Docker Compose: ‚úÖ Disponible"
    else
        print_error "Docker Compose: ‚ùå NO disponible"
        all_good=false
    fi

    # Verificar Node.js
    if node --version &>/dev/null; then
        print_success "Node.js: ‚úÖ Disponible"
    else
        print_error "Node.js: ‚ùå NO disponible"
        all_good=false
    fi

    # Verificar pnpm
    if pnpm --version &>/dev/null; then
        print_success "pnpm: ‚úÖ Disponible"
    else
        print_error "pnpm: ‚ùå NO disponible"
        all_good=false
    fi

    if [ "$all_good" = true ]; then
        print_success "¬°VERIFICACI√ìN COMPLETA! Todas las herramientas disponibles."
        return 0
    else
        print_error "VERIFICACI√ìN FALLIDA: Algunas herramientas no disponibles."
        return 1
    fi
}

# Funci√≥n para ejecutar validaci√≥n completa
run_full_validation() {
    print_step "Ejecutando validaci√≥n completa del entorno..."

    if [ -f "./scripts/core/validate-environment.sh" ]; then
        bash ./scripts/core/validate-environment.sh
        return $?
    else
        print_warning "Script de validaci√≥n no encontrado, ejecutando verificaci√≥n b√°sica..."

        # Verificaci√≥n b√°sica
        echo "=== VALIDACI√ìN B√ÅSICA DEL ENTORNO ==="
        docker --version && echo "‚úÖ Docker OK" || echo "‚ùå Docker FAIL"
        docker-compose --version && echo "‚úÖ Docker Compose OK" || echo "‚ùå Docker Compose FAIL"
        node --version && echo "‚úÖ Node.js OK" || echo "‚ùå Node.js FAIL"
        pnpm --version && echo "‚úÖ pnpm OK" || echo "‚ùå pnpm FAIL"
        return 0
    fi
}

# Funci√≥n principal
main() {
    print_header "RECONSTRUCCI√ìN 100% AUTOMATIZADA - ECONEURA DEV CONTAINER"
    echo ""
    print_status "VERSI√ìN 2.0 - CORREGIDA POST-AUTOCR√çTICA"
    print_status "Objetivo: Reconstruir dev container SIN depender de GUI"
    echo ""

    # Verificar entorno
    if ! check_devcontainer_environment; then
        exit 1
    fi

    # Verificar herramientas disponibles
    local available_tools
    available_tools=$(check_available_tools)
    echo ""

    # Intentar m√©todos automatizados en orden
    local rebuild_success=false

    # M√©todo 1: Dev Containers CLI
    if rebuild_with_devcontainers_cli; then
        rebuild_success=true
    fi

    # M√©todo 2: VS Code CLI (si m√©todo 1 fall√≥)
    if [ "$rebuild_success" = false ] && rebuild_with_vscode_cli; then
        rebuild_success=true
    fi

    # M√©todo 3: Docker Build (si m√©todos anteriores fallaron)
    if [ "$rebuild_success" = false ] && rebuild_with_docker_build; then
        rebuild_success=true
    fi

    # M√©todo 4: Manual con verificaci√≥n (si todo fall√≥)
    if [ "$rebuild_success" = false ]; then
        rebuild_manual_with_verification
        # En m√©todo manual, asumimos √©xito si el usuario confirma
        rebuild_success=true
    fi

    echo ""

    # Verificar resultado
    if verify_post_rebuild; then
        print_success "¬°RECONSTRUCCI√ìN COMPLETADA EXITOSAMENTE!"
        echo ""

        # Ejecutar validaci√≥n completa
        if run_full_validation; then
            print_success "VALIDACI√ìN COMPLETA: TODO VERDE ‚úÖ"
            echo ""
            print_status "üéØ PR√ìXIMOS PASOS:"
            echo "1. Iniciar servicios: ./scripts/start-dev.sh"
            echo "2. Verificar health checks en puertos 3000, 3101, 3102"
            echo "3. Proceder a Fase 2: Limpieza completa"
            echo ""
            print_success "FASE 1 COMPLETADA - LISTO PARA COMMIT 'env-ready-$(date +%Y%m%d)'"
        else
            print_warning "VALIDACI√ìN COMPLETA CON ADVERTENCIAS"
            print_status "Revisa los mensajes arriba antes de continuar"
        fi
    else
        print_error "RECONSTRUCCI√ìN FALLIDA - VERIFICACI√ìN NO PAS√ì"
        print_status "Revisa los logs y vuelve a intentar"
        exit 1
    fi
}

# Capturar se√±ales para cleanup
trap 'echo -e "\n${RED}Script interrumpido por usuario${NC}"; exit 1' INT TERM

# Ejecutar funci√≥n principal
main "$@"