{"numTotalTestSuites":85,"numPassedTestSuites":85,"numFailedTestSuites":0,"numPendingTestSuites":0,"numTotalTests":139,"numPassedTests":139,"numFailedTests":0,"numPendingTests":0,"numTodoTests":0,"snapshot":{"added":0,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0,"didUpdate":false},"startTime":1759857653831,"success":true,"testResults":[{"assertionResults":[{"ancestorTitles":["shared smoke test"],"fullName":"shared smoke test should pass basic assertion","status":"passed","title":"should pass basic assertion","duration":1.297696999999971,"failureMessages":[],"meta":{}},{"ancestorTitles":["shared smoke test"],"fullName":"shared smoke test should import shared modules","status":"passed","title":"should import shared modules","duration":0.17434500000001663,"failureMessages":[],"meta":{}},{"ancestorTitles":["shared smoke test","minimal.ts"],"fullName":"shared smoke test minimal.ts should create API response","status":"passed","title":"should create API response","duration":0.8223120000000108,"failureMessages":[],"meta":{}},{"ancestorTitles":["shared smoke test","minimal.ts"],"fullName":"shared smoke test minimal.ts should create API response without message","status":"passed","title":"should create API response without message","duration":0.4387769999999591,"failureMessages":[],"meta":{}},{"ancestorTitles":["shared smoke test","minimal.ts"],"fullName":"shared smoke test minimal.ts should create error response","status":"passed","title":"should create error response","duration":0.34654500000004873,"failureMessages":[],"meta":{}},{"ancestorTitles":["shared smoke test","minimal.ts"],"fullName":"shared smoke test minimal.ts should validate User interface","status":"passed","title":"should validate User interface","duration":0.3143660000000068,"failureMessages":[],"meta":{}},{"ancestorTitles":["shared smoke test","minimal.ts"],"fullName":"shared smoke test minimal.ts should validate ApiResponse interface","status":"passed","title":"should validate ApiResponse interface","duration":0.3236529999999789,"failureMessages":[],"meta":{}},{"ancestorTitles":["shared smoke test","utils/fetch-safe.ts"],"fullName":"shared smoke test utils/fetch-safe.ts should export fetchSafe function","status":"passed","title":"should export fetchSafe function","duration":0.14830599999999095,"failureMessages":[],"meta":{}},{"ancestorTitles":["shared smoke test","utils/fetch-safe.ts"],"fullName":"shared smoke test utils/fetch-safe.ts should export FetchLike type","status":"passed","title":"should export FetchLike type","duration":0.2059239999999818,"failureMessages":[],"meta":{}},{"ancestorTitles":["shared smoke test","utils/fetch-safe.ts"],"fullName":"shared smoke test utils/fetch-safe.ts should call fetch with merged headers","status":"passed","title":"should call fetch with merged headers","duration":24.671302999999966,"failureMessages":[],"meta":{}},{"ancestorTitles":["shared smoke test","utils/fetch-safe.ts"],"fullName":"shared smoke test utils/fetch-safe.ts should handle empty headers","status":"passed","title":"should handle empty headers","duration":0.4971659999999929,"failureMessages":[],"meta":{}}],"startTime":1759857654500,"endTime":1759857654529.6714,"status":"passed","message":"","name":"/home/runner/work/ECONEURA-/ECONEURA-/packages/shared/src/smoke.shared.test.ts"},{"assertionResults":[{"ancestorTitles":["Config Module"],"fullName":"Config Module should validate required environment variables","status":"passed","title":"should validate required environment variables","duration":3.590025999999966,"failureMessages":[],"meta":{}},{"ancestorTitles":["Config Module"],"fullName":"Config Module should validate URL formats","status":"passed","title":"should validate URL formats","duration":4.016159999999957,"failureMessages":[],"meta":{}},{"ancestorTitles":["Config Module"],"fullName":"Config Module should validate JWT secret minimum length","status":"passed","title":"should validate JWT secret minimum length","duration":1.8536429999999768,"failureMessages":[],"meta":{}},{"ancestorTitles":["Config Module"],"fullName":"Config Module should validate numeric transformations","status":"passed","title":"should validate numeric transformations","duration":1.9634770000000117,"failureMessages":[],"meta":{}},{"ancestorTitles":["Config Module"],"fullName":"Config Module should validate enum values","status":"passed","title":"should validate enum values","duration":3.3450410000000375,"failureMessages":[],"meta":{}},{"ancestorTitles":["Config Module"],"fullName":"Config Module should handle default values correctly","status":"passed","title":"should handle default values correctly","duration":1.6997460000000046,"failureMessages":[],"meta":{}},{"ancestorTitles":["Config Module"],"fullName":"Config Module should validate Azure OpenAI configuration","status":"passed","title":"should validate Azure OpenAI configuration","duration":1.3589210000000094,"failureMessages":[],"meta":{}}],"startTime":1759857654490,"endTime":1759857654508.359,"status":"passed","message":"","name":"/home/runner/work/ECONEURA-/ECONEURA-/packages/shared/src/__tests__/config.test.ts"},{"assertionResults":[{"ancestorTitles":["config helpers"],"fullName":"config helpers loadConfig returns parsed config with defaults","status":"passed","title":"loadConfig returns parsed config with defaults","duration":22.115710999999976,"failureMessages":[],"meta":{}},{"ancestorTitles":["config helpers"],"fullName":"config helpers loadConfig throws when required var missing","status":"passed","title":"loadConfig throws when required var missing","duration":6.926316999999983,"failureMessages":[],"meta":{}},{"ancestorTitles":["config helpers"],"fullName":"config helpers getRequiredConfig returns value and respects defaults; throws for missing optional keys","status":"passed","title":"getRequiredConfig returns value and respects defaults; throws for missing optional keys","duration":5.156644000000028,"failureMessages":[],"meta":{}},{"ancestorTitles":["config helpers"],"fullName":"config helpers getOptionalConfig returns default when missing","status":"passed","title":"getOptionalConfig returns default when missing","duration":7.553369000000032,"failureMessages":[],"meta":{}}],"startTime":1759857654789,"endTime":1759857654830.5535,"status":"passed","message":"","name":"/home/runner/work/ECONEURA-/ECONEURA-/packages/shared/src/__tests__/config.unit.test.ts"},{"assertionResults":[{"ancestorTitles":["coverage smoke"],"fullName":"coverage smoke imports ai cost-utils safely","status":"passed","title":"imports ai cost-utils safely","duration":2.995568999999989,"failureMessages":[],"meta":{}},{"ancestorTitles":["coverage smoke"],"fullName":"coverage smoke imports graph env.guard safely","status":"passed","title":"imports graph env.guard safely","duration":1.2265940000000342,"failureMessages":[],"meta":{}},{"ancestorTitles":["coverage smoke"],"fullName":"coverage smoke imports otel index safely","status":"passed","title":"imports otel index safely","duration":1.1343329999999696,"failureMessages":[],"meta":{}},{"ancestorTitles":["coverage smoke"],"fullName":"coverage smoke imports schemas index safely","status":"passed","title":"imports schemas index safely","duration":1.1492810000000304,"failureMessages":[],"meta":{}},{"ancestorTitles":["coverage smoke"],"fullName":"coverage smoke imports types index safely","status":"passed","title":"imports types index safely","duration":2.3275049999999737,"failureMessages":[],"meta":{}}],"startTime":1759857655995,"endTime":1759857656003.3274,"status":"passed","message":"","name":"/home/runner/work/ECONEURA-/ECONEURA-/packages/shared/src/__tests__/coverage.smoke.test.ts"},{"assertionResults":[{"ancestorTitles":["coverage smoke 2"],"fullName":"coverage smoke 2 imports ../ai/cost-utils","status":"passed","title":"imports ../ai/cost-utils","duration":3.626554999999996,"failureMessages":[],"meta":{}},{"ancestorTitles":["coverage smoke 2"],"fullName":"coverage smoke 2 imports ../clients/admin-client","status":"passed","title":"imports ../clients/admin-client","duration":1.9526669999999626,"failureMessages":[],"meta":{}},{"ancestorTitles":["coverage smoke 2"],"fullName":"coverage smoke 2 imports ../clients/ai-client","status":"passed","title":"imports ../clients/ai-client","duration":1.6155690000000504,"failureMessages":[],"meta":{}},{"ancestorTitles":["coverage smoke 2"],"fullName":"coverage smoke 2 imports ../clients/flows-client","status":"passed","title":"imports ../clients/flows-client","duration":1.7434180000000197,"failureMessages":[],"meta":{}},{"ancestorTitles":["coverage smoke 2"],"fullName":"coverage smoke 2 imports ../clients/integrations-client","status":"passed","title":"imports ../clients/integrations-client","duration":1.8162229999999795,"failureMessages":[],"meta":{}},{"ancestorTitles":["coverage smoke 2"],"fullName":"coverage smoke 2 imports ../graph/env.guard","status":"passed","title":"imports ../graph/env.guard","duration":1.6801490000000285,"failureMessages":[],"meta":{}},{"ancestorTitles":["coverage smoke 2"],"fullName":"coverage smoke 2 imports ../otel/index","status":"passed","title":"imports ../otel/index","duration":1.520070999999973,"failureMessages":[],"meta":{}},{"ancestorTitles":["coverage smoke 2"],"fullName":"coverage smoke 2 imports ../schemas/ai","status":"passed","title":"imports ../schemas/ai","duration":8.430702000000053,"failureMessages":[],"meta":{}},{"ancestorTitles":["coverage smoke 2"],"fullName":"coverage smoke 2 imports ../schemas/base","status":"passed","title":"imports ../schemas/base","duration":4.962211999999965,"failureMessages":[],"meta":{}},{"ancestorTitles":["coverage smoke 2"],"fullName":"coverage smoke 2 imports ../schemas/flows","status":"passed","title":"imports ../schemas/flows","duration":5.425194999999974,"failureMessages":[],"meta":{}},{"ancestorTitles":["coverage smoke 2"],"fullName":"coverage smoke 2 imports ../schemas/integrations","status":"passed","title":"imports ../schemas/integrations","duration":7.554940999999985,"failureMessages":[],"meta":{}},{"ancestorTitles":["coverage smoke 2"],"fullName":"coverage smoke 2 imports ../schemas/org","status":"passed","title":"imports ../schemas/org","duration":3.520347000000015,"failureMessages":[],"meta":{}},{"ancestorTitles":["coverage smoke 2"],"fullName":"coverage smoke 2 imports ../types/index","status":"passed","title":"imports ../types/index","duration":1.6395029999999906,"failureMessages":[],"meta":{}},{"ancestorTitles":["coverage smoke 2"],"fullName":"coverage smoke 2 imports ../types/api","status":"passed","title":"imports ../types/api","duration":5.5944299999999885,"failureMessages":[],"meta":{}},{"ancestorTitles":["coverage smoke 2"],"fullName":"coverage smoke 2 imports ../types/models","status":"passed","title":"imports ../types/models","duration":4.603322999999989,"failureMessages":[],"meta":{}},{"ancestorTitles":["coverage smoke 2"],"fullName":"coverage smoke 2 imports ../types/system","status":"passed","title":"imports ../types/system","duration":7.97951599999999,"failureMessages":[],"meta":{}},{"ancestorTitles":["coverage smoke 2"],"fullName":"coverage smoke 2 imports ../validation/crm","status":"passed","title":"imports ../validation/crm","duration":1.3537210000000073,"failureMessages":[],"meta":{}},{"ancestorTitles":["coverage smoke 2"],"fullName":"coverage smoke 2 imports ../validation/erp","status":"passed","title":"imports ../validation/erp","duration":1.1617130000000202,"failureMessages":[],"meta":{}}],"startTime":1759857656203,"endTime":1759857656269.1616,"status":"passed","message":"","name":"/home/runner/work/ECONEURA-/ECONEURA-/packages/shared/src/__tests__/coverage.smoke2.test.ts"},{"assertionResults":[{"ancestorTitles":["env.guard edge cases"],"fullName":"env.guard edge cases requireGraphEnvOrThrow passes when process.env present","status":"passed","title":"requireGraphEnvOrThrow passes when process.env present","duration":2.4149679999999876,"failureMessages":[],"meta":{}},{"ancestorTitles":["env.guard edge cases"],"fullName":"env.guard edge cases requireGraphEnvOrThrow throws when missing","status":"passed","title":"requireGraphEnvOrThrow throws when missing","duration":1.4482169999999996,"failureMessages":[],"meta":{}},{"ancestorTitles":["logging edge cases"],"fullName":"logging edge cases serializes Error, functions and circular refs and routes to transport","status":"passed","title":"serializes Error, functions and circular refs and routes to transport","duration":4.786696000000006,"failureMessages":[],"meta":{}},{"ancestorTitles":["logging edge cases"],"fullName":"logging edge cases fallbacks if console.debug missing","status":"passed","title":"fallbacks if console.debug missing","duration":0.3440699999999879,"failureMessages":[],"meta":{}},{"ancestorTitles":["config load errors and success"],"fullName":"config load errors and success loadConfig throws when required vars missing","status":"passed","title":"loadConfig throws when required vars missing","duration":27.117083000000036,"failureMessages":[],"meta":{}}],"startTime":1759857654779,"endTime":1759857654815.1172,"status":"passed","message":"","name":"/home/runner/work/ECONEURA-/ECONEURA-/packages/shared/src/__tests__/edge-cases.test.ts"},{"assertionResults":[{"ancestorTitles":["Errors Module"],"fullName":"Errors Module should be testable","status":"passed","title":"should be testable","duration":1.7718500000000006,"failureMessages":[],"meta":{}},{"ancestorTitles":["Errors Module"],"fullName":"Errors Module should handle basic error logic","status":"passed","title":"should handle basic error logic","duration":0.26228899999998134,"failureMessages":[],"meta":{}}],"startTime":1759857656550,"endTime":1759857656552.2622,"status":"passed","message":"","name":"/home/runner/work/ECONEURA-/ECONEURA-/packages/shared/src/__tests__/errors.test.ts"},{"assertionResults":[{"ancestorTitles":["HealthChecker","constructor"],"fullName":"HealthChecker constructor should create a new HealthChecker instance","status":"passed","title":"should create a new HealthChecker instance","duration":1.3421000000000163,"failureMessages":[],"meta":{}},{"ancestorTitles":["HealthChecker","registerService"],"fullName":"HealthChecker registerService should register a service check","status":"passed","title":"should register a service check","duration":2.0298399999999788,"failureMessages":[],"meta":{}},{"ancestorTitles":["HealthChecker","checkHealth"],"fullName":"HealthChecker checkHealth should return healthy status when all services are up","status":"passed","title":"should return healthy status when all services are up","duration":0.7991590000000315,"failureMessages":[],"meta":{}},{"ancestorTitles":["HealthChecker","checkHealth"],"fullName":"HealthChecker checkHealth should return unhealthy status when any service is down","status":"passed","title":"should return unhealthy status when any service is down","duration":0.28996000000000777,"failureMessages":[],"meta":{}},{"ancestorTitles":["HealthChecker","checkHealth"],"fullName":"HealthChecker checkHealth should handle service check errors","status":"passed","title":"should handle service check errors","duration":0.4568010000000413,"failureMessages":[],"meta":{}},{"ancestorTitles":["HealthChecker","checkHealth"],"fullName":"HealthChecker checkHealth should measure response time","status":"passed","title":"should measure response time","duration":2.6065550000000144,"failureMessages":[],"meta":{}},{"ancestorTitles":["HealthChecker","getUptime"],"fullName":"HealthChecker getUptime should return uptime in milliseconds","status":"passed","title":"should return uptime in milliseconds","duration":0.3150269999999864,"failureMessages":[],"meta":{}},{"ancestorTitles":["HealthChecker","helper functions","createHealthCheck"],"fullName":"HealthChecker helper functions createHealthCheck should return the check function","status":"passed","title":"should return the check function","duration":0.26459299999999075,"failureMessages":[],"meta":{}},{"ancestorTitles":["HealthChecker","helper functions","databaseHealthCheck"],"fullName":"HealthChecker helper functions databaseHealthCheck should return true for valid connection string","status":"passed","title":"should return true for valid connection string","duration":0.38462600000002567,"failureMessages":[],"meta":{}},{"ancestorTitles":["HealthChecker","helper functions","databaseHealthCheck"],"fullName":"HealthChecker helper functions databaseHealthCheck should return false for empty connection string","status":"passed","title":"should return false for empty connection string","duration":1.5908279999999877,"failureMessages":[],"meta":{}},{"ancestorTitles":["HealthChecker","helper functions","redisHealthCheck"],"fullName":"HealthChecker helper functions redisHealthCheck should return true for valid redis URL","status":"passed","title":"should return true for valid redis URL","duration":0.27505299999995714,"failureMessages":[],"meta":{}},{"ancestorTitles":["HealthChecker","helper functions","redisHealthCheck"],"fullName":"HealthChecker helper functions redisHealthCheck should return false for invalid redis URL","status":"passed","title":"should return false for invalid redis URL","duration":0.1632039999999506,"failureMessages":[],"meta":{}},{"ancestorTitles":["HealthChecker","singleton instance"],"fullName":"HealthChecker singleton instance should export a singleton healthChecker instance","status":"passed","title":"should export a singleton healthChecker instance","duration":0.1858270000000175,"failureMessages":[],"meta":{}}],"startTime":1759857654190,"endTime":1759857654201.1858,"status":"passed","message":"","name":"/home/runner/work/ECONEURA-/ECONEURA-/packages/shared/src/__tests__/health.test.ts"},{"assertionResults":[{"ancestorTitles":["shared logging"],"fullName":"shared logging formats meta objects including Error and circular refs","status":"passed","title":"formats meta objects including Error and circular refs","duration":5.791827000000012,"failureMessages":[],"meta":{}},{"ancestorTitles":["shared logging"],"fullName":"shared logging routes through transport when set","status":"passed","title":"routes through transport when set","duration":0.5922439999999938,"failureMessages":[],"meta":{}},{"ancestorTitles":["shared logging"],"fullName":"shared logging apiLogger calls routedLogger","status":"passed","title":"apiLogger calls routedLogger","duration":0.41060499999997546,"failureMessages":[],"meta":{}},{"ancestorTitles":["shared logging"],"fullName":"shared logging getLogLevel returns a string","status":"passed","title":"getLogLevel returns a string","duration":0.37435699999997496,"failureMessages":[],"meta":{}},{"ancestorTitles":["logging coverage edge cases"],"fullName":"logging coverage edge cases handles JSON.parse failure fallback path in formatMeta","status":"passed","title":"handles JSON.parse failure fallback path in formatMeta","duration":0.27233700000005,"failureMessages":[],"meta":{}},{"ancestorTitles":["logging coverage edge cases"],"fullName":"logging coverage edge cases formats functions and fallback values","status":"passed","title":"formats functions and fallback values","duration":0.24215099999997847,"failureMessages":[],"meta":{}}],"startTime":1759857655102,"endTime":1759857655110.2722,"status":"passed","message":"","name":"/home/runner/work/ECONEURA-/ECONEURA-/packages/shared/src/__tests__/logging.cover.test.ts"},{"assertionResults":[{"ancestorTitles":["Logging Module"],"fullName":"Logging Module should be testable","status":"passed","title":"should be testable","duration":1.8972530000000063,"failureMessages":[],"meta":{}},{"ancestorTitles":["Logging Module"],"fullName":"Logging Module should handle log levels","status":"passed","title":"should handle log levels","duration":1.3518980000000056,"failureMessages":[],"meta":{}}],"startTime":1759857656509,"endTime":1759857656512.3518,"status":"passed","message":"","name":"/home/runner/work/ECONEURA-/ECONEURA-/packages/shared/src/__tests__/logging.test.ts"},{"assertionResults":[{"ancestorTitles":["logging shim"],"fullName":"logging shim logger methods call console","status":"passed","title":"logger methods call console","duration":2.655526000000009,"failureMessages":[],"meta":{}},{"ancestorTitles":["logging shim"],"fullName":"logging shim apiLogger uses logger.info","status":"passed","title":"apiLogger uses logger.info","duration":0.4345400000000268,"failureMessages":[],"meta":{}}],"startTime":1759857655920,"endTime":1759857655923.4346,"status":"passed","message":"","name":"/home/runner/work/ECONEURA-/ECONEURA-/packages/shared/src/__tests__/logging.unit.test.ts"},{"assertionResults":[{"ancestorTitles":["metrics functions smoke"],"fullName":"metrics functions smoke calls metrics helpers without throwing","status":"passed","title":"calls metrics helpers without throwing","duration":2.118255000000005,"failureMessages":[],"meta":{}}],"startTime":1759857655646,"endTime":1759857655648.1182,"status":"passed","message":"","name":"/home/runner/work/ECONEURA-/ECONEURA-/packages/shared/src/__tests__/metrics.functions.test.ts"},{"assertionResults":[{"ancestorTitles":["shared middleware - smoke"],"fullName":"shared middleware - smoke loads shared core module","status":"passed","title":"loads shared core module","duration":1.7252630000000124,"failureMessages":[],"meta":{}}],"startTime":1759857656759,"endTime":1759857656760.7253,"status":"passed","message":"","name":"/home/runner/work/ECONEURA-/ECONEURA-/packages/shared/src/__tests__/middleware.spec.ts"},{"assertionResults":[{"ancestorTitles":["Middleware Module","corsMiddleware"],"fullName":"Middleware Module corsMiddleware should set CORS headers for regular requests","status":"passed","title":"should set CORS headers for regular requests","duration":3.6184000000000083,"failureMessages":[],"meta":{}},{"ancestorTitles":["Middleware Module","corsMiddleware"],"fullName":"Middleware Module corsMiddleware should handle OPTIONS requests","status":"passed","title":"should handle OPTIONS requests","duration":1.0201099999999883,"failureMessages":[],"meta":{}},{"ancestorTitles":["Middleware Module","corsMiddleware"],"fullName":"Middleware Module corsMiddleware should use custom origin","status":"passed","title":"should use custom origin","duration":0.49264800000003106,"failureMessages":[],"meta":{}},{"ancestorTitles":["Middleware Module","requestLogger"],"fullName":"Middleware Module requestLogger should log requests","status":"passed","title":"should log requests","duration":12.943538999999987,"failureMessages":[],"meta":{}},{"ancestorTitles":["Middleware Module","errorHandler"],"fullName":"Middleware Module errorHandler should intercept error status codes and set content type","status":"passed","title":"should intercept error status codes and set content type","duration":0.8141169999999534,"failureMessages":[],"meta":{}},{"ancestorTitles":["Middleware Module","errorHandler"],"fullName":"Middleware Module errorHandler should not set content type for successful responses","status":"passed","title":"should not set content type for successful responses","duration":0.7787000000000148,"failureMessages":[],"meta":{}}],"startTime":1759857654180,"endTime":1759857654199.7788,"status":"passed","message":"","name":"/home/runner/work/ECONEURA-/ECONEURA-/packages/shared/src/__tests__/middleware.test.ts"},{"assertionResults":[{"ancestorTitles":["middleware"],"fullName":"middleware corsMiddleware sets headers and handles OPTIONS","status":"passed","title":"corsMiddleware sets headers and handles OPTIONS","duration":3.6815069999999537,"failureMessages":[],"meta":{}},{"ancestorTitles":["middleware"],"fullName":"middleware jsonBodyParser parses JSON and handles invalid JSON","status":"passed","title":"jsonBodyParser parses JSON and handles invalid JSON","duration":6.534631999999988,"failureMessages":[],"meta":{}},{"ancestorTitles":["middleware"],"fullName":"middleware requestLogger logs on finish","status":"passed","title":"requestLogger logs on finish","duration":2.821415000000002,"failureMessages":[],"meta":{}},{"ancestorTitles":["middleware"],"fullName":"middleware errorHandler decorates writeHead","status":"passed","title":"errorHandler decorates writeHead","duration":0.9922379999999862,"failureMessages":[],"meta":{}}],"startTime":1759857654820,"endTime":1759857654833.9922,"status":"passed","message":"","name":"/home/runner/work/ECONEURA-/ECONEURA-/packages/shared/src/__tests__/middleware.unit.test.ts"},{"assertionResults":[{"ancestorTitles":["env.guard"],"fullName":"env.guard ensureGraphEnv false when no env and empty vars","status":"passed","title":"ensureGraphEnv false when no env and empty vars","duration":1.6336729999999875,"failureMessages":[],"meta":{}},{"ancestorTitles":["env.guard"],"fullName":"env.guard ensureGraphEnv true when provided","status":"passed","title":"ensureGraphEnv true when provided","duration":0.2754229999999893,"failureMessages":[],"meta":{}},{"ancestorTitles":["env.guard"],"fullName":"env.guard requireGraphEnvOrThrow throws when missing","status":"passed","title":"requireGraphEnvOrThrow throws when missing","duration":1.1920709999999985,"failureMessages":[],"meta":{}},{"ancestorTitles":["ai client and cost utils"],"fullName":"ai client and cost utils ai client generate and parse","status":"passed","title":"ai client generate and parse","duration":0.6405630000000428,"failureMessages":[],"meta":{}},{"ancestorTitles":["ai client and cost utils"],"fullName":"ai client and cost utils estimateAICost and formatCostEur","status":"passed","title":"estimateAICost and formatCostEur","duration":0.44648200000000315,"failureMessages":[],"meta":{}},{"ancestorTitles":["logging helpers"],"fullName":"logging helpers formatting and transport routing","status":"passed","title":"formatting and transport routing","duration":0.6309350000000222,"failureMessages":[],"meta":{}},{"ancestorTitles":["logging helpers"],"fullName":"logging helpers apiLogger shims to routedLogger","status":"passed","title":"apiLogger shims to routedLogger","duration":0.31137999999998556,"failureMessages":[],"meta":{}},{"ancestorTitles":["logging helpers"],"fullName":"logging helpers log level getters/setters","status":"passed","title":"log level getters/setters","duration":0.4414220000000455,"failureMessages":[],"meta":{}}],"startTime":1759857655129,"endTime":1759857655135.4414,"status":"passed","message":"","name":"/home/runner/work/ECONEURA-/ECONEURA-/packages/shared/src/__tests__/misc.test.ts"},{"assertionResults":[{"ancestorTitles":["placeholder modules smoke"],"fullName":"placeholder modules smoke invokes placeholder functions","status":"passed","title":"invokes placeholder functions","duration":4.580261000000007,"failureMessages":[],"meta":{}}],"startTime":1759857655398,"endTime":1759857655402.5803,"status":"passed","message":"","name":"/home/runner/work/ECONEURA-/ECONEURA-/packages/shared/src/__tests__/placeholders.functions.test.ts"},{"assertionResults":[{"ancestorTitles":["RateLimiter","constructor"],"fullName":"RateLimiter constructor should create with default values","status":"passed","title":"should create with default values","duration":2.4134950000000117,"failureMessages":[],"meta":{}},{"ancestorTitles":["RateLimiter","constructor"],"fullName":"RateLimiter constructor should create with custom values","status":"passed","title":"should create with custom values","duration":0.48010400000003983,"failureMessages":[],"meta":{}},{"ancestorTitles":["RateLimiter","isAllowed"],"fullName":"RateLimiter isAllowed should allow first request","status":"passed","title":"should allow first request","duration":0.4418929999999932,"failureMessages":[],"meta":{}},{"ancestorTitles":["RateLimiter","isAllowed"],"fullName":"RateLimiter isAllowed should allow requests within limit","status":"passed","title":"should allow requests within limit","duration":0.270403999999985,"failureMessages":[],"meta":{}},{"ancestorTitles":["RateLimiter","isAllowed"],"fullName":"RateLimiter isAllowed should block requests over limit","status":"passed","title":"should block requests over limit","duration":0.24651899999997795,"failureMessages":[],"meta":{}},{"ancestorTitles":["RateLimiter","isAllowed"],"fullName":"RateLimiter isAllowed should reset after window expires","status":"passed","title":"should reset after window expires","duration":2.754220000000032,"failureMessages":[],"meta":{}},{"ancestorTitles":["RateLimiter","isAllowed"],"fullName":"RateLimiter isAllowed should handle different keys independently","status":"passed","title":"should handle different keys independently","duration":0.3500120000000493,"failureMessages":[],"meta":{}},{"ancestorTitles":["RateLimiter","getRemainingRequests"],"fullName":"RateLimiter getRemainingRequests should return max requests for new key","status":"passed","title":"should return max requests for new key","duration":0.28325799999998935,"failureMessages":[],"meta":{}},{"ancestorTitles":["RateLimiter","getRemainingRequests"],"fullName":"RateLimiter getRemainingRequests should decrease remaining requests","status":"passed","title":"should decrease remaining requests","duration":0.30910500000004504,"failureMessages":[],"meta":{}},{"ancestorTitles":["RateLimiter","getRemainingRequests"],"fullName":"RateLimiter getRemainingRequests should not go below zero","status":"passed","title":"should not go below zero","duration":0.18708800000001702,"failureMessages":[],"meta":{}},{"ancestorTitles":["RateLimiter","getResetTime"],"fullName":"RateLimiter getResetTime should return future time for new key","status":"passed","title":"should return future time for new key","duration":0.24198999999998705,"failureMessages":[],"meta":{}},{"ancestorTitles":["RateLimiter","getResetTime"],"fullName":"RateLimiter getResetTime should return same reset time for existing key","status":"passed","title":"should return same reset time for existing key","duration":0.1477949999999737,"failureMessages":[],"meta":{}},{"ancestorTitles":["RateLimiter","clear"],"fullName":"RateLimiter clear should clear all entries","status":"passed","title":"should clear all entries","duration":0.23647999999997182,"failureMessages":[],"meta":{}},{"ancestorTitles":["createRateLimitMiddleware"],"fullName":"createRateLimitMiddleware should allow requests within limit","status":"passed","title":"should allow requests within limit","duration":2.574044000000015,"failureMessages":[],"meta":{}},{"ancestorTitles":["createRateLimitMiddleware"],"fullName":"createRateLimitMiddleware should block requests over limit","status":"passed","title":"should block requests over limit","duration":2.0688329999999837,"failureMessages":[],"meta":{}},{"ancestorTitles":["createRateLimitMiddleware"],"fullName":"createRateLimitMiddleware should use custom key function","status":"passed","title":"should use custom key function","duration":0.6955749999999625,"failureMessages":[],"meta":{}},{"ancestorTitles":["createRateLimitMiddleware"],"fullName":"createRateLimitMiddleware should use anonymous key by default","status":"passed","title":"should use anonymous key by default","duration":0.41209700000001703,"failureMessages":[],"meta":{}}],"startTime":1759857654182,"endTime":1759857654196.412,"status":"passed","message":"","name":"/home/runner/work/ECONEURA-/ECONEURA-/packages/shared/src/__tests__/rate-limiter.test.ts"},{"assertionResults":[{"ancestorTitles":["shared retry - smoke"],"fullName":"shared retry - smoke basic assertion","status":"passed","title":"basic assertion","duration":1.1914790000000153,"failureMessages":[],"meta":{}}],"startTime":1759857656822,"endTime":1759857656823.1914,"status":"passed","message":"","name":"/home/runner/work/ECONEURA-/ECONEURA-/packages/shared/src/__tests__/retry.spec.ts"},{"assertionResults":[{"ancestorTitles":["Retry Module","withRetry"],"fullName":"Retry Module withRetry should return result on first attempt","status":"passed","title":"should return result on first attempt","duration":3.170365000000004,"failureMessages":[],"meta":{}},{"ancestorTitles":["Retry Module","withRetry"],"fullName":"Retry Module withRetry should retry on failure and succeed","status":"passed","title":"should retry on failure and succeed","duration":4.257079000000033,"failureMessages":[],"meta":{}},{"ancestorTitles":["Retry Module","withRetry"],"fullName":"Retry Module withRetry should fail after max attempts","status":"passed","title":"should fail after max attempts","duration":3.4942080000000146,"failureMessages":[],"meta":{}},{"ancestorTitles":["Retry Module","withRetry"],"fullName":"Retry Module withRetry should use custom retry condition","status":"passed","title":"should use custom retry condition","duration":4.1123589999999695,"failureMessages":[],"meta":{}},{"ancestorTitles":["Retry Module","withRetry"],"fullName":"Retry Module withRetry should not retry when condition returns false","status":"passed","title":"should not retry when condition returns false","duration":0.7292490000000384,"failureMessages":[],"meta":{}},{"ancestorTitles":["Retry Module","defaultRetryOptions"],"fullName":"Retry Module defaultRetryOptions should have sensible defaults","status":"passed","title":"should have sensible defaults","duration":0.5380220000000122,"failureMessages":[],"meta":{}},{"ancestorTitles":["Retry Module","defaultRetryOptions"],"fullName":"Retry Module defaultRetryOptions should retry on network errors","status":"passed","title":"should retry on network errors","duration":0.5407679999999573,"failureMessages":[],"meta":{}}],"startTime":1759857654492,"endTime":1759857654509.5408,"status":"passed","message":"","name":"/home/runner/work/ECONEURA-/ECONEURA-/packages/shared/src/__tests__/retry.test.ts"},{"assertionResults":[{"ancestorTitles":["retry"],"fullName":"retry withRetry succeeds without retries","status":"passed","title":"withRetry succeeds without retries","duration":3.047736000000043,"failureMessages":[],"meta":{}},{"ancestorTitles":["retry"],"fullName":"retry withRetry retries on error and eventually throws","status":"passed","title":"withRetry retries on error and eventually throws","duration":5.719813999999985,"failureMessages":[],"meta":{}},{"ancestorTitles":["retry"],"fullName":"retry retryable decorator wraps method with retry","status":"passed","title":"retryable decorator wraps method with retry","duration":1.9578260000000114,"failureMessages":[],"meta":{}}],"startTime":1759857655425,"endTime":1759857655435.9578,"status":"passed","message":"","name":"/home/runner/work/ECONEURA-/ECONEURA-/packages/shared/src/__tests__/retry.unit.test.ts"},{"assertionResults":[{"ancestorTitles":["ServiceClient"],"fullName":"ServiceClient createServiceClient returns a client with stats and a mock request","status":"passed","title":"createServiceClient returns a client with stats and a mock request","duration":1.853742000000011,"failureMessages":[],"meta":{}}],"startTime":1759857656317,"endTime":1759857656318.8538,"status":"passed","message":"","name":"/home/runner/work/ECONEURA-/ECONEURA-/packages/shared/src/__tests__/service-client.test.ts"},{"assertionResults":[{"ancestorTitles":["core smoke"],"fullName":"core smoke can import core module and its re-exports","status":"passed","title":"can import core module and its re-exports","duration":28.438834000000014,"failureMessages":[],"meta":{}}],"startTime":1759857656006,"endTime":1759857656034.4387,"status":"passed","message":"","name":"/home/runner/work/ECONEURA-/ECONEURA-/packages/shared/src/__tests__/smoke.core.test.ts"},{"assertionResults":[{"ancestorTitles":["events smoke"],"fullName":"events smoke can import events module","status":"passed","title":"can import events module","duration":5.141165999999998,"failureMessages":[],"meta":{}}],"startTime":1759857656612,"endTime":1759857656617.141,"status":"passed","message":"","name":"/home/runner/work/ECONEURA-/ECONEURA-/packages/shared/src/__tests__/smoke.events.test.ts"},{"assertionResults":[{"ancestorTitles":["shared index smoke"],"fullName":"shared index smoke provides default export and env helper","status":"passed","title":"provides default export and env helper","duration":46.01623799999999,"failureMessages":[],"meta":{}}],"startTime":1759857655702,"endTime":1759857655748.0164,"status":"passed","message":"","name":"/home/runner/work/ECONEURA-/ECONEURA-/packages/shared/src/__tests__/smoke.index.test.ts"},{"assertionResults":[{"ancestorTitles":["metrics smoke"],"fullName":"metrics smoke exports metrics object and helpers","status":"passed","title":"exports metrics object and helpers","duration":2.0198520000000144,"failureMessages":[],"meta":{}}],"startTime":1759857656282,"endTime":1759857656284.0198,"status":"passed","message":"","name":"/home/runner/work/ECONEURA-/ECONEURA-/packages/shared/src/__tests__/smoke.metrics.test.ts"},{"assertionResults":[{"ancestorTitles":["validation helpers"],"fullName":"validation helpers validateEmail accepts valid and rejects invalid","status":"passed","title":"validateEmail accepts valid and rejects invalid","duration":3.2272909999999797,"failureMessages":[],"meta":{}},{"ancestorTitles":["validation helpers"],"fullName":"validation helpers validateUUID works","status":"passed","title":"validateUUID works","duration":0.5588409999999726,"failureMessages":[],"meta":{}},{"ancestorTitles":["validation helpers"],"fullName":"validation helpers validatePositiveNumber and nonEmptyString","status":"passed","title":"validatePositiveNumber and nonEmptyString","duration":0.9420640000000162,"failureMessages":[],"meta":{}},{"ancestorTitles":["validation helpers"],"fullName":"validation helpers validateData returns success or errors","status":"passed","title":"validateData returns success or errors","duration":1.9156419999999912,"failureMessages":[],"meta":{}}],"startTime":1759857655697,"endTime":1759857655703.9155,"status":"passed","message":"","name":"/home/runner/work/ECONEURA-/ECONEURA-/packages/shared/src/__tests__/validation.test.ts"},{"assertionResults":[{"ancestorTitles":["shared/logger"],"fullName":"shared/logger calls console methods with message and meta","status":"passed","title":"calls console methods with message and meta","duration":5.011633999999987,"failureMessages":[],"meta":{}},{"ancestorTitles":["shared/logger"],"fullName":"shared/logger serializes Error objects into plain objects","status":"passed","title":"serializes Error objects into plain objects","duration":5.884239000000008,"failureMessages":[],"meta":{}},{"ancestorTitles":["shared/logger"],"fullName":"shared/logger handles circular references gracefully","status":"passed","title":"handles circular references gracefully","duration":0.9934199999999578,"failureMessages":[],"meta":{}},{"ancestorTitles":["shared/logger"],"fullName":"shared/logger respects log level filtering","status":"passed","title":"respects log level filtering","duration":1.2723900000000299,"failureMessages":[],"meta":{}}],"startTime":1759857655078,"endTime":1759857655091.2725,"status":"passed","message":"","name":"/home/runner/work/ECONEURA-/ECONEURA-/packages/shared/src/logging/index.test.ts"},{"assertionResults":[{"ancestorTitles":["shared/logger - transport"],"fullName":"shared/logger - transport routes logs to the configured transport","status":"passed","title":"routes logs to the configured transport","duration":7.6468229999999835,"failureMessages":[],"meta":{}},{"ancestorTitles":["shared/logger - transport"],"fullName":"shared/logger - transport clearTransport restores console routing","status":"passed","title":"clearTransport restores console routing","duration":2.5558999999999514,"failureMessages":[],"meta":{}}],"startTime":1759857655372,"endTime":1759857655381.556,"status":"passed","message":"","name":"/home/runner/work/ECONEURA-/ECONEURA-/packages/shared/src/logging/transport.test.ts"}]}